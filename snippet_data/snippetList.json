{
  "data": [
    {
      "id": "average",
      "type": "snippetListing",
      "title": "average",
      "attributes": {
        "text": "Returns the average value of a list of numbers.\n\nUse `Iterable.reduce()` to get the sum of all the numbers in a list, divide by `Iterable.length` to get the average.\n\n",
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "4fc857134b7d962a076ecb751464f74f3b1f725acea6d15954984ed10531e1d5"
      }
    },
    {
      "id": "averageBy",
      "type": "snippetListing",
      "title": "averageBy",
      "attributes": {
        "text": "Returns the average of a list, after mapping each element to a number using the provided function.\n\nUse `Iterable.map()` to map each element to the numeric value returned by `fn`, `Iterable.reduce()` to sum the values, divide by `Iterable.length` to get the average.\n\n",
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "1c2444f3cb95c6095c0530c66f8f430d41a48bc90d747b367204b7a68d7b9848"
      }
    },
    {
      "id": "capitalize",
      "type": "snippetListing",
      "title": "capitalize",
      "attributes": {
        "text": "Capitalizes the first letter of a string.\n\nUse `String.toUpperCase()` to capitalize first letter and `String.toLowerCase()` to convert the rest of the string to lowercase, if necessary.\nOmit the optional parameter, `lowerRest`, to keep the rest of the string intact, or set it to `true` to convert to lowercase.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "ddfd4d1e5248a64ad0fb9cd624a3568c50e82c7934cdedb422cdede7d69f63d0"
      }
    },
    {
      "id": "chunk",
      "type": "snippetListing",
      "title": "chunk",
      "attributes": {
        "text": "Chunks a list into smaller lists of the specified size.\n\nUse `List.generate()` to generate a list that fits the number of chunks that will be produced.\nUse `List.sublist()` to map each element of the new list to a chunk the length of `size`. \nIf the original `list` can't be split evenly, the final chunk will contain the remaining elements.\n\n",
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "965965a68856a9e21622da19b9139082e4f22e055c2f612016804c6d0667161b"
      }
    },
    {
      "id": "compactWhitespace",
      "type": "snippetListing",
      "title": "compactWhitespace",
      "attributes": {
        "text": "Returns a string with whitespaces compacted.\n\nUse `String.replaceAll()` with a regular expression to replace all occurrences of 2 or more whitespace characters with a single space.\n\n",
        "tags": [
          "string",
          "regexp",
          "beginner"
        ]
      },
      "meta": {
        "hash": "aa464e8d34094581b2d9cdea74b9f553e8a94d447f159b0c3f79c26e216a0f8e"
      }
    },
    {
      "id": "countBy",
      "type": "snippetListing",
      "title": "countBy",
      "attributes": {
        "text": "Groups the elements of a list based on the given function and returns the count of elements in each group.\n\nUse `Iterable.map()` to map each element to the value returned by `fn`, `Iterable.toSet()` to get the unique values of the list.\nUse `Map.fromIterable()`, `Iterable.where()` and `Iterable.length` to generate a map with the unique values as keys and their frequencies as values.\n\n",
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "69c3ed9ad53213916e10ab6e133fb547647897bb9f15e399b10d3007e497b60c"
      }
    },
    {
      "id": "decapitalize",
      "type": "snippetListing",
      "title": "decapitalize",
      "attributes": {
        "text": "Decapitalizes the first letter of a string.\n\nUse `String.toLowerCase()` to decapitalize first letter and `String.toUpperCase()` to convert the rest of the string to uppercase, if necessary.\nOmit the optional parameter, `upperRest`, to keep the rest of the string intact, or set it to `true` to convert to uppercase.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "73456bc53b9feb0769f3588638f57b863ee25fe7a0579ca6b21daf9e1034e053"
      }
    },
    {
      "id": "degreesToRads",
      "type": "snippetListing",
      "title": "degreesToRads",
      "attributes": {
        "text": "Converts an angle from degrees to radians.\n\nUse `pi` and the degree to radian formula to convert the angle from degrees to radians.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "2aa2bec371cdd82af6f2cd7464d425d5b39e0c4179c9c1a582f68c733bd405e2"
      }
    },
    {
      "id": "difference",
      "type": "snippetListing",
      "title": "difference",
      "attributes": {
        "text": "Returns the difference between two lists.\n\nUse `Iterable.toSet()` to get the unique values in `b`.\nUse `Iterable.where()` in combination with `Iterable.contains()` to keep only the values in `a` not contained in `b`, `Iterable.toList()` to return the appropriate result.\n\n",
        "tags": [
          "list",
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "a3c5b561c0b4bfa48b0733d6a2ababb225dd27aceba499df5180b712a25bd85c"
      }
    },
    {
      "id": "differenceBy",
      "type": "snippetListing",
      "title": "differenceBy",
      "attributes": {
        "text": "Returns the difference between two lists, after applying the provided function to each list element of both.\n\nUse `Iterable.toSet()` and `Iterable.map()` to get the unique values in `b` after applying `fn` to them.\nUse `Iterable.map()` to apply `fn` to all the values of `a`,  `Iterable.where()` in combination with `Iterable.contains()` to keep only the values in the resulting list not contained in the unique mapped values of `b`, `Iterable.toList()` to return the appropriate result.\n\n",
        "tags": [
          "list",
          "math",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "9dfcc0505fe97ba7a1bab2cddaef6943d6676c2439cfd05d805b59aace57f4d2"
      }
    },
    {
      "id": "digitize",
      "type": "snippetListing",
      "title": "digitize",
      "attributes": {
        "text": "Converts an integer to a list of digits.\n\nUse string interpolation to convert the integer to a string, `String.split('')` to convert it into a list.\nUse `Iterable.map()` and `int.parse()` to transform each value to an integer, `Iterable.toList()` to return a list.\n\n",
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "f086785dd97709ad42f07477489d518ecf45791c878ebb74a71a27074a56000f"
      }
    },
    {
      "id": "factorial",
      "type": "snippetListing",
      "title": "factorial",
      "attributes": {
        "text": "Calculates the factorial of an integer.\n\nUse recursion. \nIf `n` is less than or equal to `1`, return `1`. \nOtherwise, return the product of `n` and the factorial of `n-1`. \nThrows an exception if `n` is a negative number.\n\n",
        "tags": [
          "math",
          "recursion",
          "beginner"
        ]
      },
      "meta": {
        "hash": "5fcfb984b0bf0903f20e2033c2e76995dbc3fe75918d3e26ae35e69969bad565"
      }
    },
    {
      "id": "fibonacci",
      "type": "snippetListing",
      "title": "fibonacci",
      "attributes": {
        "text": "Generates a list, containing the Fibonacci sequence, up until the nth term.\n\nUse `List.generate()` to generate a list with `n` terms, using a function that returns the sum of the last two values, except for the first two.\n\n",
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "dd26a21299d1ed9f3e821ebcedf9708b24b7217ed993fbc3662d43210dba7bc7"
      }
    },
    {
      "id": "frequencies",
      "type": "snippetListing",
      "title": "frequencies",
      "attributes": {
        "text": "Returns a map with the unique values of a list as keys and their frequencies as the values.\n\nUse `Iterable.toSet()` to get the unique values of the list.\nUse `Map.fromIterable()`, `Iterable.where()` and `Iterable.length` to generate a map with the unique values as keys and their frequencies as values.\n\n",
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "e83d3ebf963cfaffced8aa2cd5bcd1f4a3289e8acd732b52b87f5f18658bc02f"
      }
    },
    {
      "id": "groupBy",
      "type": "snippetListing",
      "title": "groupBy",
      "attributes": {
        "text": "Groups the elements of a list based on the given function.\n\nUse `Iterable.map()` to map each element to the value returned by `fn`, `Iterable.toSet()` to get the unique values of the list.\nUse `Map.fromIterable()`, `Iterable.where()` and `Iterable.toList()` to generate a map with the unique values as keys and the list elements as values.\n\n",
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "15baadf7ded8bc4963c7f7ea1efccaede6f6274ce2d7883c44b8585880b61e94"
      }
    },
    {
      "id": "isAnagram",
      "type": "snippetListing",
      "title": "isAnagram",
      "attributes": {
        "text": "Checks if a string is an anagram of another string (case-insensitive, ignores spaces, punctuation and special characters).\n\nUse `String.toLowerCase()` and `String.prototype.replaceAll()` with an appropriate regular expression to remove unnecessary characters and convert the string to lowercase.\nUse `String.split('')`, `Iterable.sort()`, in combination with the cascade operator (`..`) and `Iterable.join('')` to normalize both strings and check if their normalized forms are equal.\n\n",
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "3628065bf0010aacda59c2b9cab443193bbba4e097e6e6bef6f38443b00b0835"
      }
    },
    {
      "id": "isDivisible",
      "type": "snippetListing",
      "title": "isDivisible",
      "attributes": {
        "text": "Checks if the first integer argument is divisible by the second one.\n\nUse the modulo operator (`%`) to check if the remainder is equal to `0`.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "835100465726034631df6beff4a0bdbaa9fd185c89f68d48935bc57b6bdee1a1"
      }
    },
    {
      "id": "isEven",
      "type": "snippetListing",
      "title": "isEven",
      "attributes": {
        "text": "Returns `true` if the given number is even, `false` otherwise.\n\nChecks whether a number is odd or even using the modulo (`%`) operator. \nReturns `true` if the number is even, `false` if the number is odd.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "81e2ea61320bff6729ee966a17d4918ff94f5fef16ea78f72217e280a3106f22"
      }
    },
    {
      "id": "isLowerCase",
      "type": "snippetListing",
      "title": "isLowerCase",
      "attributes": {
        "text": "Checks if a string is lower case.\n\nConvert the given string to lower case, using `String.toLowerCase()` and compare it to the original.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "e5f1b2a57cb1606e3bf8065174f6b286c8ac9b0c4125ebb7375e543682d685f5"
      }
    },
    {
      "id": "isOdd",
      "type": "snippetListing",
      "title": "isOdd",
      "attributes": {
        "text": "Returns `true` if the given number is odd, `false` otherwise.\n\nChecks whether a number is odd or even using the modulo (`%`) operator. \nReturns `true` if the number is odd, `false` if the number is even.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "a19d0b0952202d1e40cd20692b47454fae53b7a5ff39d2acf65e608cb0fd44aa"
      }
    },
    {
      "id": "isPalindrome",
      "type": "snippetListing",
      "title": "isPalindrome",
      "attributes": {
        "text": "Returns `true` if the given string is a palindrome, `false` otherwise.\n\nUse `String.toLowerCase()` to convert the given string to lowercase, `String.replaceAll()` to remove non-alphanumeric characters.\nUse `String.split('')`, `Iterable.reversed` and `Iterable.join('')` to reverse it and compare it to the unreversed string.\n\n",
        "tags": [
          "string",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "ed2dc2b619b24f32a99ed4921f38ec813df3ce5eabd0cf8ab47ca8c44fa96486"
      }
    },
    {
      "id": "isUpperCase",
      "type": "snippetListing",
      "title": "isUpperCase",
      "attributes": {
        "text": "Checks if a string is upper case.\n\nConvert the given string to upper case, using `String.toUpperCase()` and compare it to the original.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "856c4cdd2a615a427bc09e5116c560533befc5f01a1e5ee483e9318b98287f9b"
      }
    },
    {
      "id": "mapNumRange",
      "type": "snippetListing",
      "title": "mapNumRange",
      "attributes": {
        "text": "Maps a number from one range to another range.\n\nReturns `n` mapped between `outMin`-`outMax` from `inMin`-`inMax`.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "6731cb2bf08f88c6c4a6b8ca853464319a7d23e979e9102d6e27bc1e5aea6c69"
      }
    },
    {
      "id": "mapString",
      "type": "snippetListing",
      "title": "mapString",
      "attributes": {
        "text": "Creates a string with the results of calling the provided function on every character in the given string.\n\nUse `String.split('')` and `Iterable.map()` to call the provided function, `fn`, for each character in `str`. \nUse `Iterable.join('')` to recombine the list of runes into a string. \n\n",
        "tags": [
          "string",
          "list",
          "function",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "da4d80156b8e73dadf912e5b2c3e10fa444b67443ede71b14f0643b5ceb380b5"
      }
    },
    {
      "id": "mask",
      "type": "snippetListing",
      "title": "mask",
      "attributes": {
        "text": "Replaces all but the last `num` runes of a string with the specified `mask`.\n\nUse `String.substring()` to grab the last `num` runes, `String.padLeft()` to fill the beginning of the string with the `mask` up to the original length.\nOmit the optional parameter, `num`, to keep a default of `4` runes unmasked.\nOmit the optional parameter, `mask`, to use the default of `'*'`.\n\n",
        "tags": [
          "string",
          "utility",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "418b1bda199c29d25b32146493e236c1ec9a104dac15b843c289791f3012fd20"
      }
    },
    {
      "id": "max",
      "type": "snippetListing",
      "title": "max",
      "attributes": {
        "text": "Returns the maximum value in a list of numbers.\n\nUse `Iterable.reduce()` in combination with `max()` to find the maximum value.\n\n",
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "d302bcce3951c7eca4f25eea43020f9c47faf756c81a1d0a6045c5f0874997ef"
      }
    },
    {
      "id": "maxBy",
      "type": "snippetListing",
      "title": "maxBy",
      "attributes": {
        "text": "Returns the maximum value of a list, after mapping each element to a number using the provided function.\n\nUse `Iterable.map()` to map each element to the numeric value returned by `fn`, `max()` to find the maximum value.\n\n",
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "d7d3986b23c68cce3a7012aa21d1b2220b3567153936ca450d83e07f957ecf50"
      }
    },
    {
      "id": "min",
      "type": "snippetListing",
      "title": "min",
      "attributes": {
        "text": "Returns the minimum value in a list of numbers.\n\nUse `Iterable.reduce()` in combination with `min()` to find the minimum value.\n\n",
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "cfb146e64a03bfe981435f29ef79c9077a19f6153a9e0078b592b6acc7a78ce0"
      }
    },
    {
      "id": "minBy",
      "type": "snippetListing",
      "title": "minBy",
      "attributes": {
        "text": "Returns the minimum value of a list, after mapping each element to a number using the provided function.\n\nUse `Iterable.map()` to map each element to the numeric value returned by `fn`, `min()` to find the minimum value.\n\n",
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "356f65b435705adfab5c5649ca659ba1af075a7cec6b9694f5f73312749d4b04"
      }
    },
    {
      "id": "mostFrequent",
      "type": "snippetListing",
      "title": "mostFrequent",
      "attributes": {
        "text": "Returns the most frequent element in a list.\n\nUse `Iterable.toSet()` to get the unique values of the list, `Set.reduce()` to iterate over them and `Iterable.where()` to find the most frequent element.\n\n",
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "df42d206a1165ed64b83def79698ff47ac547ccb20b8baa942e252b68d4b26c7"
      }
    },
    {
      "id": "pad",
      "type": "snippetListing",
      "title": "pad",
      "attributes": {
        "text": "Pads a string on both sides with the specified `padding`, if it's shorter than the specified `length`.\n\nUse `String.padLeft()` and `String.padRight()` to pad both sides of the given string. \nOmit the optional parameter, `padding`, to use the whitespace as the default padding.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "35b0173d85a332c04a9b89ce067d69b2b86e969b6c9d35598e3939acb5b991cb"
      }
    },
    {
      "id": "radsToDegrees",
      "type": "snippetListing",
      "title": "radsToDegrees",
      "attributes": {
        "text": "Converts an angle from radians to degrees.\n\nUse `pi` and the radian to degree formula to convert the angle from radians to degrees.\n\n",
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "dd62b3c11efb81479e30d9d2f9e1271830be7f2a1ff485e9dccc917c6f306208"
      }
    },
    {
      "id": "randomDoubleInRange",
      "type": "snippetListing",
      "title": "randomDoubleInRange",
      "attributes": {
        "text": "Returns a random double in the specified range.\n\nUse `Random.nextDouble()` to generate a random number between `0.0` and `1.0` and map it to the desired range.\nOmit the optional parameter, `min`, to use a default minimu value of `0.0`.\nOmit the optional parameter, `max`, to use a default maximum value of `1.0`.\n\n",
        "tags": [
          "math",
          "utility",
          "random",
          "beginner"
        ]
      },
      "meta": {
        "hash": "3b77902ec76e9e9516fd91ca5a96108f9673cbe9b28d57a9ced19f037cd27d2d"
      }
    },
    {
      "id": "randomIntInRange",
      "type": "snippetListing",
      "title": "randomIntInRange",
      "attributes": {
        "text": "Returns a random integer in the specified range.\n\nUse `Random.nextDouble()` to generate a random number between `0.0` and `1.0` and map it to the desired range, using `num.floor()` to make it an integer.\nOmit the optional parameter, `min`, to use a default minimu value of `0`.\nOmit the optional parameter, `max`, to use a default maximum value of `100`.\n\n",
        "tags": [
          "math",
          "utility",
          "random",
          "beginner"
        ]
      },
      "meta": {
        "hash": "46004bf004a6b4498b53987e57ca879932d8e81689578789b02970a6e45d91a0"
      }
    },
    {
      "id": "randomIntListInRange",
      "type": "snippetListing",
      "title": "randomIntListInRange",
      "attributes": {
        "text": "Returns a a list of `n` random integers in the specified range.\n\nUse `List.generate()` to generate a list with `n` terms, using a function that returns a random integer between `min` and `max`.\nOmit the optional parameter, `min`, to use a default minimu value of `0`.\nOmit the optional parameter, `max`, to use a default maximum value of `100`.\n\n",
        "tags": [
          "math",
          "utility",
          "random",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "fd93d8686d0ffc26ea720c423a1cc02a25356127a9f35c99dd6fc5921312054c"
      }
    },
    {
      "id": "removeNonASCII",
      "type": "snippetListing",
      "title": "removeNonASCII",
      "attributes": {
        "text": "Removes non-printable ASCII characters.\n\nUse `String.replaceAll()` with a regular expression to remove non-printable ASCII characters.\n\n",
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "adc6cc56427a870c02c3afb895eac78c733c0fe9769b075ea1d12971c6de25f0"
      }
    },
    {
      "id": "reverseString",
      "type": "snippetListing",
      "title": "reverseString",
      "attributes": {
        "text": "Reverses a string.\n\nUse `String.split('')` and `Iterable.reversed` to reverse the order of the runes in the string.\nUse `Iterable.join('')` to combine the runes and get the reversed string.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "ce2cfa0ccc61075fb46ef9f64d99cb9b4f89c4eaf2370eb2aa76634b9e63fde5"
      }
    },
    {
      "id": "slice",
      "type": "snippetListing",
      "title": "slice",
      "attributes": {
        "text": "Returns a new list containing the elements between `start` and `end`.\nNegative values can be used, indicating an offset from the end of the list.\n\nUse `num.isNegative` to check if either `start` or `end` are negative and normalize their values.\nUse `List.sublist()` with the normalized values to return the desired list.\nOmit the optional parameter, `end`, to use the length of the list as the default.\n\n",
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "3b1ae3d2faedb8317fcbca853e17ab0482c08c5f8fef79c44ae2a6a5da19da94"
      }
    },
    {
      "id": "splitLines",
      "type": "snippetListing",
      "title": "splitLines",
      "attributes": {
        "text": "Splits a multiline string into a list of lines.\n\nUse `String.split()` and a regular expression to match line breaks and create a list.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "d3e127adec9e62636e2ea07fe6b9c05590b2a8bfe4069ba2b859ca8853d7e617"
      }
    },
    {
      "id": "sum",
      "type": "snippetListing",
      "title": "sum",
      "attributes": {
        "text": "Returns the sum value of a list of numbers.\n\nUse `Iterable.reduce()` to sum all the numbers in a list.\n\n",
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "3722d9aec3fa61f42391822a4c6007780268266c08f8f30d1076098078413765"
      }
    },
    {
      "id": "sumBy",
      "type": "snippetListing",
      "title": "sumBy",
      "attributes": {
        "text": "Returns the sum of a list, after mapping each element to a number using the provided function.\n\nUse `Iterable.map()` to map each element to the numeric value returned by `fn`, `Iterable.reduce()` to sum the values.\n\n",
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "fb15cf3dd1c7c91be045da40ce6894c3ecb2ad84ed5739609e8696493bbb83a5"
      }
    },
    {
      "id": "symmetricDifference",
      "type": "snippetListing",
      "title": "symmetricDifference",
      "attributes": {
        "text": "Returns the symmetric difference between two lists, without filtering out duplicate values.\n\nUse `Iterable.toSet()` to get the unique values in each list.\nUse `Iterable.where()` in combination with `Iterable.contains()` to keep only the values in one list and not the other.\nFinally, use `Iterable.toList()` and `Iterable.addAll()` in combination with the cascade operator (`..`) to return the result.\n\n",
        "tags": [
          "list",
          "math",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "fc50b850e4c7d22cd18078218af4b95480af4afb0576b6cf738cd75c8d46bedc"
      }
    },
    {
      "id": "symmetricDifferenceBy",
      "type": "snippetListing",
      "title": "symmetricDifferenceBy",
      "attributes": {
        "text": "Returns the symmetric difference between two lists, after applying the provided function to each list element of both.\n\nUse `Iterable.toSet()` and `Iterable.map()` to get the unique values in each list after applying `fn` to them.\nUse `Iterable.where()` in combination with `Iterable.contains()` to keep only the values in one list and not the other.\nFinally, use `Iterable.toList()` and `Iterable.addAll()` in combination with the cascade operator (`..`) to return the result.\n\n",
        "tags": [
          "list",
          "math",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "cc6d2dc9f680724b5a3c50f73f5d73fc30289d32203eaa62b7062748acb7389b"
      }
    },
    {
      "id": "toCamelCase",
      "type": "snippetListing",
      "title": "toCamelCase",
      "attributes": {
        "text": "Converts a string to camelcase.\n\nUse `String.replaceAllMapped()` to break the string into words and capitalize the first letter of each word, using a `RegExp`.\nUse `String.replaceAll()` to remove invalid separator characters (`_`, `-` and spaces).\nFinally, use `String.toLowerCase()` and to convert the first letter to lowercase.\n\n",
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "d0248206b0c3dbda2c71aa54daf0d2659539672f6f3e397a7b0e726e0ddc382e"
      }
    },
    {
      "id": "toKebabCase",
      "type": "snippetListing",
      "title": "toKebabCase",
      "attributes": {
        "text": "Converts a string to kebab case.\n\nUse `String.replaceAllMapped()` to break the string into words and `String.toLowerCase()` to convert each one to lowercase, using a `RegExp`.\nUse `String.replaceAll()` to replace invalid separator characters (`_` and spaces). with hyphens\n\n",
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "cd8a2ba937ea9a61a0738805b646534c4ad36d8d2dc9cbf426e1b7ea80043227"
      }
    },
    {
      "id": "toSnakeCase",
      "type": "snippetListing",
      "title": "toSnakeCase",
      "attributes": {
        "text": "Converts a string to snake case.\n\nUse `String.replaceAllMapped()` to break the string into words and `String.toLowerCase()` to convert each one to lowercase, using a `RegExp`.\nUse `String.replaceAll()` to replace invalid separator characters (`-` and spaces) with underscores.\n\n",
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "b30baebfacc3921da346d42c1a29bcd694d2de66d6d5f52c33debfb71fc208e9"
      }
    },
    {
      "id": "toTitleCase",
      "type": "snippetListing",
      "title": "toTitleCase",
      "attributes": {
        "text": "Converts a string to title case.\n\nUse `String.replaceAllMapped()` to break the string into words and capitalize the first letter of each word, using a `RegExp`.\nUse `String.replaceAll()` to replace invalid separator characters (`-` and `_`) with spaces.\n\n",
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "185618ff621d81d014cb4c7d7d669efcd98c49c81491170cbff1b9a888fa9313"
      }
    },
    {
      "id": "truncateString",
      "type": "snippetListing",
      "title": "truncateString",
      "attributes": {
        "text": "Truncates a string up to a specified length.\n\nDetermine if the string's `length` is greater than `num`. \nReturn the string truncated to the desired length, with `'...'` appended to the end or the original string.\n\n",
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "12f8fd6f79899f2f9a894a9903a5f355ae4f360285a9474936e446301fee574c"
      }
    },
    {
      "id": "words",
      "type": "snippetListing",
      "title": "words",
      "attributes": {
        "text": "Converts a given string into a list of words.\n\nUse `String.split()` with the supplied `pattern` to convert to a list of strings. \nUse `Iterable.where()` in combination with `String.isNotEmpty` to remove any empty strings. \nFinally, convert to a list using `Iterable.toList()`.\nOmit the optional parameter, `pattern`, to use the default regular expression (non-alphanumeric characters).\n\n",
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "c9105c2d0f47f2e521923fb05006049c72b18779f1eac2dbdd031aecb50e5c7b"
      }
    }
  ],
  "meta": {
    "specification": "http://jsonapi.org/format/",
    "type": "snippetListingArray",
    "language": {
      "short": "dart",
      "long": "Dart"
    }
  }
}