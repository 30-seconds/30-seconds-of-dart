{
  "data": [
    {
      "id": "average",
      "title": "average",
      "type": "snippet",
      "attributes": {
        "fileName": "average.md",
        "text": "Returns the average value of a list of numbers.\n\nUse `Iterable.reduce()` to get the sum of all the numbers in a list, divide by `Iterable.length` to get the average.\n\n",
        "codeBlocks": {
          "code": "num average(List<num> nums){\n  return nums.reduce((num a, num b) => a + b) / nums.length;\n}",
          "example": "average([1, 2, 3, 4]); // 2.5"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "4fc857134b7d962a076ecb751464f74f3b1f725acea6d15954984ed10531e1d5",
        "firstSeen": "1579626973",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "averageBy",
      "title": "averageBy",
      "type": "snippet",
      "attributes": {
        "fileName": "averageBy.md",
        "text": "Returns the average of a list, after mapping each element to a number using the provided function.\n\nUse `Iterable.map()` to map each element to the numeric value returned by `fn`, `Iterable.reduce()` to sum the values, divide by `Iterable.length` to get the average.\n\n",
        "codeBlocks": {
          "code": "num averageBy<T>(List<T> lst, num Function(T) fn) {\n  return lst.map(fn).reduce((num a, num b) => a + b) / lst.length;\n}",
          "example": "averageBy([ {'n': 4}, {'n': 2}, {'n': 8}, {'n': 6} ], (o) => o['n']); // 5"
        },
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "1c2444f3cb95c6095c0530c66f8f430d41a48bc90d747b367204b7a68d7b9848",
        "firstSeen": "1579628185",
        "lastUpdated": "1579631549",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "capitalize",
      "title": "capitalize",
      "type": "snippet",
      "attributes": {
        "fileName": "capitalize.md",
        "text": "Capitalizes the first letter of a string.\n\nUse `String.toUpperCase()` to capitalize first letter and `String.toLowerCase()` to convert the rest of the string to lowercase, if necessary.\nOmit the optional parameter, `lowerRest`, to keep the rest of the string intact, or set it to `true` to convert to lowercase.\n\n",
        "codeBlocks": {
          "code": "String capitalize(String str, {bool lowerRest = false}) {\n  return str[0].toUpperCase() +\n      (lowerRest ? str.substring(1).toLowerCase() : str.substring(1));\n}",
          "example": "capitalize('fooBar'); // 'FooBar'\ncapitalize('fooBar', lowerRest: true); // 'Foobar'"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "ddfd4d1e5248a64ad0fb9cd624a3568c50e82c7934cdedb422cdede7d69f63d0",
        "firstSeen": "1579632223",
        "lastUpdated": "1579680689",
        "updateCount": 4,
        "authorCount": 3
      }
    },
    {
      "id": "compactWhitespace",
      "title": "compactWhitespace",
      "type": "snippet",
      "attributes": {
        "fileName": "compactWhitespace.md",
        "text": "Returns a string with whitespaces compacted.\n\nUse `String.replaceAll()` with a regular expression to replace all occurrences of 2 or more whitespace characters with a single space.\n\n",
        "codeBlocks": {
          "code": "String compactWhitespace(String str) {\n  return str.replaceAll(new RegExp(r'\\s{2,}'), ' ');\n}",
          "example": "compactWhitespace('Lorem    Ipsum'); // 'Lorem Ipsum'\ncompactWhitespace('Lorem \\n Ipsum'); // 'Lorem Ipsum'"
        },
        "tags": [
          "string",
          "regexp",
          "beginner"
        ]
      },
      "meta": {
        "hash": "a107b15108358109198dd38a394f94bc95e3b9cb3fb7eed4dbe44e2679b6122c",
        "firstSeen": "1579691307",
        "lastUpdated": "1579691307",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "decapitalize",
      "title": "decapitalize",
      "type": "snippet",
      "attributes": {
        "fileName": "decapitalize.md",
        "text": "Decapitalizes the first letter of a string.\n\nUse `String.toLowerCase()` to decapitalize first letter and `String.toUpperCase()` to convert the rest of the string to uppercase, if necessary.\nOmit the optional parameter, `upperRest`, to keep the rest of the string intact, or set it to `true` to convert to uppercase.\n\n",
        "codeBlocks": {
          "code": "String capitalize(String str, {bool upperRest = false}) {\n  return str[0].toUpperCase() +\n      (upperRest ? str.substring(1).toLowerCase() : str.substring(1));\n}",
          "example": "capitalize('FooBar'); // 'fooBar'\ncapitalize('FooBar', upperRest: true); // 'fOOBAR'"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "73456bc53b9feb0769f3588638f57b863ee25fe7a0579ca6b21daf9e1034e053",
        "firstSeen": "1579632349",
        "lastUpdated": "1579680689",
        "updateCount": 3,
        "authorCount": 3
      }
    },
    {
      "id": "degreesToRads",
      "title": "degreesToRads",
      "type": "snippet",
      "attributes": {
        "fileName": "degreesToRads.md",
        "text": "Converts an angle from degrees to radians.\n\nUse `pi` and the degree to radian formula to convert the angle from degrees to radians.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum degreesToRads(num deg) {\n  return (deg * pi) / 180.0;\n}",
          "example": "degreesToRads(90.0); // ~1.5708"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "2aa2bec371cdd82af6f2cd7464d425d5b39e0c4179c9c1a582f68c733bd405e2",
        "firstSeen": "1579766566",
        "lastUpdated": "1579766566",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "digitize",
      "title": "digitize",
      "type": "snippet",
      "attributes": {
        "fileName": "digitize.md",
        "text": "Converts an integer to a list of digits.\n\nUse string interpolation to convert the integer to a string, `String.split('')` to convert it into a list.\nUse `Iterable.map()` and `int.parse()` to transform each value to an integer, `Iterable.toList()` to return a list.\n\n",
        "codeBlocks": {
          "code": "List<int> digitze(int n) {\n  return \"${n}\".split('').map((s) => int.parse(s)).toList();\n}",
          "example": "digitize(123); // [1, 2, 3]"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "f086785dd97709ad42f07477489d518ecf45791c878ebb74a71a27074a56000f",
        "firstSeen": "1579704973",
        "lastUpdated": "1579704973",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "factorial",
      "title": "factorial",
      "type": "snippet",
      "attributes": {
        "fileName": "factorial.md",
        "text": "Calculates the factorial of an integer.\n\nUse recursion. \nIf `n` is less than or equal to `1`, return `1`. \nOtherwise, return the product of `n` and the factorial of `n-1`. \nThrows an exception if `n` is a negative number.\n\n",
        "codeBlocks": {
          "code": "int factorial(int n) {\n  if (n < 0) throw ('Negative numbers are not allowed.');\n  return n <= 1 ? 1 : n * factorial(n - 1);\n}",
          "example": "factorial(6); // 720"
        },
        "tags": [
          "math",
          "recursion",
          "beginner"
        ]
      },
      "meta": {
        "hash": "5fcfb984b0bf0903f20e2033c2e76995dbc3fe75918d3e26ae35e69969bad565",
        "firstSeen": "1579704597",
        "lastUpdated": "1579704597",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "fibonacci",
      "title": "fibonacci",
      "type": "snippet",
      "attributes": {
        "fileName": "fibonacci.md",
        "text": "Generates a list, containing the Fibonacci sequence, up until the nth term.\n\nUse `List.generate()` to generate a new list with `n` terms, using a function that returns the sum of the last two values, except for the first two.\n\n",
        "codeBlocks": {
          "code": "List<int> fibonacci(int n) {\n  int last = 1;\n  int last2 = 0;\n  return new List<int>.generate(n, (int i) {\n    if (i < 2) return i;\n    int curr = last + last2;\n    last2 = last;\n    last = curr;\n    return curr;\n  });\n}",
          "example": "fibonacci(6); // [0, 1, 1, 2, 3, 5]"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "83f28d90014d096802f67334981f487f34b733511daa6b6276b97d5138dc3041",
        "firstSeen": "1579705610",
        "lastUpdated": "1579705610",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "frequencies",
      "title": "frequencies",
      "type": "snippet",
      "attributes": {
        "fileName": "frequencies.md",
        "text": "Returns a map with the unique values of a list as keys and their frequencies as the values.\n\nUse `Iterable.toSet()` to get the unique values of the list.\nUse `Map.fromIterable()`, `Iterable.where()` and `Iterable.length` to generate a map with the unique values as keys and their frequencies as values.\n\n",
        "codeBlocks": {
          "code": "Map<T, int> frequencies<T>(Iterable<T> itr) {\n  return new Map.fromIterable(itr.toSet(),\n      value: (i) => itr.where((v) => v == i).length);\n}",
          "example": "frequencies(['a', 'b', 'a', 'c', 'a', 'a', 'b']); // { a: 4, b: 2, c: 1 }"
        },
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "e675454e4ec51e2808447bb7a76f85224fcd3edae47a9b55c02c04e87ec0b171",
        "firstSeen": "1580308074",
        "lastUpdated": "1580308946",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "isAnagram",
      "title": "isAnagram",
      "type": "snippet",
      "attributes": {
        "fileName": "isAnagram.md",
        "text": "Checks if a string is an anagram of another string (case-insensitive, ignores spaces, punctuation and special characters).\n\nUse `String.toLowerCase()` and `String.prototype.replaceAll()` with an appropriate regular expression to remove unnecessary characters and convert the string to lowercase.\nUse `String.split('')`, `Iterable.sort()`, in combination with the cascade operator (`..`) and `Iterable.join('')` to normalize both strings and check if their normalized forms are equal.\n\n",
        "codeBlocks": {
          "code": "bool isAnagram(String str1, String str2) {\n  String normalize(String str) => (str\n          .toLowerCase()\n          .replaceAll(new RegExp(r'[^a-z0-9]', caseSensitive: false), '')\n          .split('')\n            ..sort())\n      .join('');\n  return normalize(str1) == normalize(str2);\n}",
          "example": "isAnagram('iceman', 'cinema'); // true"
        },
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "469cb8b909b21088952cb59b367c5900401f7a4437053f1ee69e0de918f55cde",
        "firstSeen": "1579683169",
        "lastUpdated": "1579683169",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "isDivisible",
      "title": "isDivisible",
      "type": "snippet",
      "attributes": {
        "fileName": "isDivisible.md",
        "text": "Checks if the first integer argument is divisible by the second one.\n\nUse the modulo operator (`%`) to check if the remainder is equal to `0`.\n\n",
        "codeBlocks": {
          "code": "bool isDivisible(int dividend, int divisor) {\n  return dividend % divisor == 0;\n}",
          "example": "isDivisible(6, 3); // true"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "835100465726034631df6beff4a0bdbaa9fd185c89f68d48935bc57b6bdee1a1",
        "firstSeen": "1579766320",
        "lastUpdated": "1579766320",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "isEven",
      "title": "isEven",
      "type": "snippet",
      "attributes": {
        "fileName": "isEven.md",
        "text": "Returns `true` if the given number is even, `false` otherwise.\n\nChecks whether a number is odd or even using the modulo (`%`) operator. \nReturns `true` if the number is even, `false` if the number is odd.\n\n",
        "codeBlocks": {
          "code": "bool isEven(num n) {\n  return n % 2 == 0;\n}",
          "example": "isEven(3); // false"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "81e2ea61320bff6729ee966a17d4918ff94f5fef16ea78f72217e280a3106f22",
        "firstSeen": "1579614060",
        "lastUpdated": "1579614060",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "isLowerCase",
      "title": "isLowerCase",
      "type": "snippet",
      "attributes": {
        "fileName": "isLowerCase.md",
        "text": "Checks if a string is lower case.\n\nConvert the given string to lower case, using `String.toLowerCase()` and compare it to the original.\n\n",
        "codeBlocks": {
          "code": "bool isLowerCase(String str) {\n  return str == str.toLowerCase();\n}",
          "example": "isLowerCase('abc'); // true\nisLowerCase('a3@$'); // true\nisLowerCase('Ab4'); // false"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "e5f1b2a57cb1606e3bf8065174f6b286c8ac9b0c4125ebb7375e543682d685f5",
        "firstSeen": "1579703353",
        "lastUpdated": "1579703353",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "isOdd",
      "title": "isOdd",
      "type": "snippet",
      "attributes": {
        "fileName": "isOdd.md",
        "text": "Returns `true` if the given number is odd, `false` otherwise.\n\nChecks whether a number is odd or even using the modulo (`%`) operator. \nReturns `true` if the number is odd, `false` if the number is even.\n\n",
        "codeBlocks": {
          "code": "bool isOdd(num n) {\n  return n % 2 != 0;\n}",
          "example": "isOdd(3); // true"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "a19d0b0952202d1e40cd20692b47454fae53b7a5ff39d2acf65e608cb0fd44aa",
        "firstSeen": "1579614060",
        "lastUpdated": "1579614060",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "isPalindrome",
      "title": "isPalindrome",
      "type": "snippet",
      "attributes": {
        "fileName": "isPalindrome.md",
        "text": "Returns `true` if the given string is a palindrome, `false` otherwise.\n\nUse `String.toLowerCase()` to convert the given string to lowercase, `String.replaceAll()` to remove non-alphanumeric characters.\nUse `String.split('')`, `Iterable.reversed` and `Iterable.join('')` to reverse it and compare it to the unreversed string.\n\n",
        "codeBlocks": {
          "code": "bool isPalindrome(String str) {\n  String s = str.toLowerCase().replaceAll(new RegExp(r'[\\W_]'), '');\n  return s == s.split('').reversed.join('');\n}",
          "example": "isPalindrome('taco cat'); // true"
        },
        "tags": [
          "string",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "357be655419520a56ad13b32f4229d790e68b97006583f97fcb48a9da435baef",
        "firstSeen": "1579679384",
        "lastUpdated": "1579679384",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "isUpperCase",
      "title": "isUpperCase",
      "type": "snippet",
      "attributes": {
        "fileName": "isUpperCase.md",
        "text": "Checks if a string is upper case.\n\nConvert the given string to upper case, using `String.toUpperCase()` and compare it to the original.\n\n",
        "codeBlocks": {
          "code": "bool isUpperCase(String str) {\n  return str == str.toUpperCase();\n}",
          "example": "isUpperCase('ABC'); // true\nisUpperCase('A3@$'); // true\nisUpperCase('aB4'); // false"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "856c4cdd2a615a427bc09e5116c560533befc5f01a1e5ee483e9318b98287f9b",
        "firstSeen": "1579703353",
        "lastUpdated": "1579703353",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "mapNumRange",
      "title": "mapNumRange",
      "type": "snippet",
      "attributes": {
        "fileName": "mapNumRange.md",
        "text": "Maps a number from one range to another range.\n\nReturns `n` mapped between `outMin`-`outMax` from `inMin`-`inMax`.\n\n",
        "codeBlocks": {
          "code": "num mapNumRange(num n, num inMin, num inMax, num outMin, num outMax) {\n  return ((n - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\n}",
          "example": "mapNumRange(5, 0, 10, 0, 100); // 50"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "6731cb2bf08f88c6c4a6b8ca853464319a7d23e979e9102d6e27bc1e5aea6c69",
        "firstSeen": "1579765965",
        "lastUpdated": "1579765965",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "mapString",
      "title": "mapString",
      "type": "snippet",
      "attributes": {
        "fileName": "mapString.md",
        "text": "Creates a new string with the results of calling the provided function on every character in the given string.\n\nUse `String.split('')` and `Iterable.map()` to call the provided function, `fn`, for each character in `str`. \nUse `Iterable.join('')` to recombine the list of runes into a string. \n\n",
        "codeBlocks": {
          "code": "String mapString(String str, String Function(String c) fn) {\n  return str.split('').map(fn).join('');\n}",
          "example": "mapString('lorem ipsum', (c) => c.toUpperCase()); // 'LOREM IPSUM'"
        },
        "tags": [
          "string",
          "list",
          "function",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "56213a234c309b03425f4235989efce5a9a31ec128d6b41bd06356f2b0b31a9e",
        "firstSeen": "1579631640",
        "lastUpdated": "1579631640",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "mask",
      "title": "mask",
      "type": "snippet",
      "attributes": {
        "fileName": "mask.md",
        "text": "Replaces all but the last `num` runes of a string with the specified `mask`.\n\nUse `String.substring()` to grab the last `num` runes, `String.padLeft()` to fill the beginning of the string with the `mask` up to the original length.\nOmit the optional parameter, `num`, to keep a default of `4` runes unmasked.\nOmit the optional parameter, `mask`, to use the default of `'*'`.\n\n",
        "codeBlocks": {
          "code": "String mask(String str, {int num = 4, String mask = '*'}) {\n  return str.substring(str.length - num).padLeft(str.length, mask);\n}",
          "example": "mask('1234567890'); // '******7890'\nmask('1234567890', num: 3); // '*******890'\nmask('1234567890', num: 4, mask: '\\$'); // '$$$$$$7890'"
        },
        "tags": [
          "string",
          "utility",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "418b1bda199c29d25b32146493e236c1ec9a104dac15b843c289791f3012fd20",
        "firstSeen": "1579690257",
        "lastUpdated": "1579690257",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "max",
      "title": "max",
      "type": "snippet",
      "attributes": {
        "fileName": "max.md",
        "text": "Returns the maximum value in a list of numbers.\n\nUse `Iterable.reduce()` in combination with `max()` to find the maximum value.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum max(List<num> nums){\n  return nums.reduce(max);\n}",
          "example": "max([4, 6, 1, 2, 5]); // 6"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "d302bcce3951c7eca4f25eea43020f9c47faf756c81a1d0a6045c5f0874997ef",
        "firstSeen": "1579626973",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "maxBy",
      "title": "maxBy",
      "type": "snippet",
      "attributes": {
        "fileName": "maxBy.md",
        "text": "Returns the maximum value of a list, after mapping each element to a number using the provided function.\n\nUse `Iterable.map()` to map each element to the numeric value returned by `fn`, `max()` to find the maximum value.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum maxBy<T>(List<T> lst, num Function(T) fn) {\n  return lst.map(fn).reduce(math.max);\n}",
          "example": "maxBy([ {'n': 4}, {'n': 2}, {'n': 8}, {'n': 6} ], (o) => o['n']); // 8"
        },
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "d7d3986b23c68cce3a7012aa21d1b2220b3567153936ca450d83e07f957ecf50",
        "firstSeen": "1579628185",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "min",
      "title": "min",
      "type": "snippet",
      "attributes": {
        "fileName": "min.md",
        "text": "Returns the minimum value in a list of numbers.\n\nUse `Iterable.reduce()` in combination with `min()` to find the minimum value.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum min(List<num> nums){\n  return nums.reduce(math.min);\n}",
          "example": "min([4, 6, 1, 2, 5]); // 1"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "cfb146e64a03bfe981435f29ef79c9077a19f6153a9e0078b592b6acc7a78ce0",
        "firstSeen": "1579626973",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "minBy",
      "title": "minBy",
      "type": "snippet",
      "attributes": {
        "fileName": "minBy.md",
        "text": "Returns the minimum value of a list, after mapping each element to a number using the provided function.\n\nUse `Iterable.map()` to map each element to the numeric value returned by `fn`, `min()` to find the minimum value.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum minBy<T>(List<T> lst, num Function(T) fn) {\n  return lst.map(fn).reduce(math.min);\n}",
          "example": "minBy([ {'n': 4}, {'n': 2}, {'n': 8}, {'n': 6} ], (o) => o['n']); // 8"
        },
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "356f65b435705adfab5c5649ca659ba1af075a7cec6b9694f5f73312749d4b04",
        "firstSeen": "1579628185",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "mostFrequent",
      "title": "mostFrequent",
      "type": "snippet",
      "attributes": {
        "fileName": "mostFrequent.md",
        "text": "Returns the most frequent element in a list.\n\nUse `Iterable.toSet()` to get the unique values of the list, `Set.reduce()` to iterate over them and `Iterable.where()` to find the most frequent element.\n\n",
        "codeBlocks": {
          "code": "T mostFrequent<T>(Iterable<T> itr) {\n  return itr.toSet().reduce((i, j) =>\n    itr.where((v) => v == i).length > itr.where((v) => v == j).length ? i : j);\n}",
          "example": "mostFrequent(['a', 'b', 'a', 'c', 'a', 'a', 'b']); // 'a'"
        },
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "df42d206a1165ed64b83def79698ff47ac547ccb20b8baa942e252b68d4b26c7",
        "firstSeen": "1580308946",
        "lastUpdated": "1580308946",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "pad",
      "title": "pad",
      "type": "snippet",
      "attributes": {
        "fileName": "pad.md",
        "text": "Pads a string on both sides with the specified `padding`, if it's shorter than the specified `length`.\n\nUse `String.padLeft()` and `String.padRight()` to pad both sides of the given string. \nOmit the optional parameter, `padding`, to use the whitespace as the default padding.\n\n",
        "codeBlocks": {
          "code": "String pad(String str, int length, {String padding = ' '}) {\n  return str\n      .padLeft(((str.length + length) / 2).floor(), padding)\n      .padRight(length, padding);\n}",
          "example": "pad('cat', 8); // '  cat   '\npad(String(42), 6, padding: '0'); // '004200'\npad('foobar', 3); // 'foobar'"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "35b0173d85a332c04a9b89ce067d69b2b86e969b6c9d35598e3939acb5b991cb",
        "firstSeen": "1579703357",
        "lastUpdated": "1579703357",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "radsToDegrees",
      "title": "radsToDegrees",
      "type": "snippet",
      "attributes": {
        "fileName": "radsToDegrees.md",
        "text": "Converts an angle from radians to degrees.\n\nUse `pi` and the radian to degree formula to convert the angle from radians to degrees.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum radsToDegrees(num rad) {\n  return (rad * 180.0) / pi;\n}",
          "example": "radsToDegrees(pi / 2); // 90"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "dd62b3c11efb81479e30d9d2f9e1271830be7f2a1ff485e9dccc917c6f306208",
        "firstSeen": "1579766566",
        "lastUpdated": "1579766566",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "randomDoubleInRange",
      "title": "randomDoubleInRange",
      "type": "snippet",
      "attributes": {
        "fileName": "randomDoubleInRange.md",
        "text": "Returns a random double in the specified range.\n\nUse `Random.nextDouble()` to generate a random number between `0.0` and `1.0` and map it to the desired range.\nOmit the optional parameter, `min`, to use a default minimu value of `0.0`.\nOmit the optional parameter, `max`, to use a default maximum value of `1.0`.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\ndouble randomDoubleInRange({double min = 0.0, double max = 1.0}) {\n  return new Random().nextDouble() * (max - min + 1) + min;\n}",
          "example": "randomDoubleInRange(); // 0.719213632334785\nrandomDoubleInRange(min: 2.4, max: 9.8); // 6.21315328537085"
        },
        "tags": [
          "mat",
          "utility",
          "random",
          "beginner"
        ]
      },
      "meta": {
        "hash": "658bd9a4a71cec2ec00e23332bec06d037c1d4be9724e5c328216e74e148608c",
        "firstSeen": "1579630718",
        "lastUpdated": "1579630718",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "randomIntInRange",
      "title": "randomIntInRange",
      "type": "snippet",
      "attributes": {
        "fileName": "randomIntInRange.md",
        "text": "Returns a random integer in the specified range.\n\nUse `Random.nextDouble()` to generate a random number between `0.0` and `1.0` and map it to the desired range, using `num.floor()` to make it an integer.\nOmit the optional parameter, `min`, to use a default minimu value of `0`.\nOmit the optional parameter, `max`, to use a default maximum value of `100`.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nint randomIntInRange({int min = 0, int max = 100}) {\n  return (new Random().nextDouble() * (max - min + 1) + min).floor();\n}",
          "example": "randomIntInRange(); // 90\nrandomIntInRange(min: 10, max: 30); // 23"
        },
        "tags": [
          "mat",
          "utility",
          "random",
          "beginner"
        ]
      },
      "meta": {
        "hash": "f34461c86bbcdbbc3f5d9eb2a0e36061f77c0312f1e845c5180d40390eb7f32b",
        "firstSeen": "1579630718",
        "lastUpdated": "1579630718",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "randomIntListInRange",
      "title": "randomIntListInRange",
      "type": "snippet",
      "attributes": {
        "fileName": "randomIntListInRange.md",
        "text": "Returns a a list of `n` random integers in the specified range.\n\nUse `List.generate()` to generate a new list with `n` terms, using a function that returns a random integer between `min` and `max`.\nOmit the optional parameter, `min`, to use a default minimu value of `0`.\nOmit the optional parameter, `max`, to use a default maximum value of `100`.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nList<int> randomIntListInRange(n, {int min = 0, int max = 100}) {\n  return new List<int>.generate(\n      n, (_) => (new Random().nextDouble() * (max - min + 1) + min).floor());\n}",
          "example": "randomIntListInRange(12, 35, 10); // [ 34, 14, 27, 17, 30, 27, 20, 26, 21, 14 ]"
        },
        "tags": [
          "mat",
          "utility",
          "random",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "9f77abe792d89b0959788469a1fed3e0c8e8fc139f01b0a0a6e169960566f794",
        "firstSeen": "1579765678",
        "lastUpdated": "1579765678",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "removeNonASCII",
      "title": "removeNonASCII",
      "type": "snippet",
      "attributes": {
        "fileName": "removeNonASCII.md",
        "text": "Removes non-printable ASCII characters.\n\nUse `String.replaceAll()` with a regular expression to remove non-printable ASCII characters.\n\n",
        "codeBlocks": {
          "code": "String removeNonASCII(String str) {\n  return str.replaceAll(new RegExp(r'[^\\x20-\\x7E]'), '');\n}",
          "example": "removeNonASCII('äÄçÇéÉêlorem-ipsumöÖÐþúÚ'); // 'lorem-ipsum'"
        },
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "ce78d1bc523747803931cc6b7869ec1c2e12c57edb61e46a8b79a2bd7c29f83d",
        "firstSeen": "1579690839",
        "lastUpdated": "1579690839",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "reverseString",
      "title": "reverseString",
      "type": "snippet",
      "attributes": {
        "fileName": "reverseString.md",
        "text": "Reverses a string.\n\nUse `String.split('')` and `Iterable.reversed` to reverse the order of the runes in the string.\nUse `Iterable.join('')` to combine the runes and get the reversed string.\n\n",
        "codeBlocks": {
          "code": "String reverseString(String str) {\n  return str.split('').reversed.join('');\n}",
          "example": "reverseString('foobar'); // 'raboof'"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "ce2cfa0ccc61075fb46ef9f64d99cb9b4f89c4eaf2370eb2aa76634b9e63fde5",
        "firstSeen": "1579679557",
        "lastUpdated": "1579679557",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "slice",
      "title": "slice",
      "type": "snippet",
      "attributes": {
        "fileName": "slice.md",
        "text": "Returns a new list containing the elements between `start` and `end`.\nNegative values can be used, indicating an offset from the end of the list.\n\nUse `num.isNegative` to check if either `start` or `end` are negative and normalize their values.\nUse `List.sublist()` with the normalized values to return the desired list.\nOmit the optional parameter, `end`, to use the length of the list as the default.\n\n",
        "codeBlocks": {
          "code": "List<T> slice<T>(List<T> lst, int start, [int end]) {\n  int _start = start.isNegative ? lst.length + start : start;\n  int _end = end != null ? end.isNegative ? lst.length + end : end : lst.length;\n  return lst.sublist(_start, _end);\n}",
          "example": "List<int> n = [1, 2, 3, 4, 5, 6, 7, 8];\n\nslice(n, 5);      // [6, 7, 8]\nslice(n, 1, 3);   // [2, 3]\nslice(n, 2, -2);  // [3, 4, 5, 6]\nslice(n, -4);     // [5, 6, 7, 8]\nslice(n, -6, -2); // [3, 4, 5, 6]"
        },
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "3b1ae3d2faedb8317fcbca853e17ab0482c08c5f8fef79c44ae2a6a5da19da94",
        "firstSeen": "1579768143",
        "lastUpdated": "1579768143",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "splitLines",
      "title": "splitLines",
      "type": "snippet",
      "attributes": {
        "fileName": "splitLines.md",
        "text": "Splits a multiline string into a list of lines.\n\nUse `String.split()` and a regular expression to match line breaks and create a list.\n\n",
        "codeBlocks": {
          "code": "List<String> splitLines(String str) {\n  return str.split(new RegExp(r'\\r?\\n'));\n}",
          "example": "splitLines('This\\nis a\\nmultiline\\nstring.\\n'); // ['This', 'is a', 'multiline', 'string.' , '']"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "d69d493ab0ce88e04d6df5eccb4a66c14996a6070995c712a555c29a4856b4da",
        "firstSeen": "1579691995",
        "lastUpdated": "1579691995",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "sum",
      "title": "sum",
      "type": "snippet",
      "attributes": {
        "fileName": "sum.md",
        "text": "Returns the sum value of a list of numbers.\n\nUse `Iterable.reduce()` to sum all the numbers in a list.\n\n",
        "codeBlocks": {
          "code": "num sum(List<num> nums){\n  return nums.reduce((num a, num b) => a + b);\n}",
          "example": "sum([1, 2, 3, 4]); // 10"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "3722d9aec3fa61f42391822a4c6007780268266c08f8f30d1076098078413765",
        "firstSeen": "1579626973",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "sumBy",
      "title": "sumBy",
      "type": "snippet",
      "attributes": {
        "fileName": "sumBy.md",
        "text": "Returns the sum of a list, after mapping each element to a number using the provided function.\n\nUse `Iterable.map()` to map each element to the numeric value returned by `fn`, `Iterable.reduce()` to sum the values.\n\n",
        "codeBlocks": {
          "code": "num sumBy<T>(List<T> lst, num Function(T) fn) {\n  return lst.map(fn).reduce((num a, num b) => a + b);\n}",
          "example": "sumBy([ {'n': 4}, {'n': 2}, {'n': 8}, {'n': 6} ], (o) => o['n']); // 20"
        },
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "fb15cf3dd1c7c91be045da40ce6894c3ecb2ad84ed5739609e8696493bbb83a5",
        "firstSeen": "1579628185",
        "lastUpdated": "1579631549",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "toCamelCase",
      "title": "toCamelCase",
      "type": "snippet",
      "attributes": {
        "fileName": "toCamelCase.md",
        "text": "Converts a string to camelcase.\n\nUse `String.replaceAllMapped()` to break the string into words and capitalize the first letter of each word, using a `RegExp`.\nUse `String.replaceAll()` to remove invalid separator characters (`_`, `-` and spaces).\nFinally, use `String.toLowerCase()` and to convert the first letter to lowercase.\n\n",
        "codeBlocks": {
          "code": "String toCamelCase(String str) {\n  String s = str\n      .replaceAllMapped(\n          new RegExp(\n              r'[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+'),\n          (Match m) =>\n              \"${m[0][0].toUpperCase()}${m[0].substring(1).toLowerCase()}\")\n      .replaceAll(new RegExp(r'(_|-|\\s)+'), '');\n  return s[0].toLowerCase() + s.substring(1);\n}",
          "example": "toCamelCase('some_database_field_name'); // 'someDatabaseFieldName'\ntoCamelCase('Some label that needs to be camelized'); // 'someLabelThatNeedsToBeCamelized'\ntoCamelCase('some-javascript-property'); // 'someJavascriptProperty'\ntoCamelCase('some-mixed_string with spaces_underscores-and-hyphens'); // 'someMixedStringWithSpacesUnderscoresAndHyphens'"
        },
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "5dfc8907f30daf76bce852b01d71625aecebc2cc53165800c0a81fec4c67643e",
        "firstSeen": "1579634104",
        "lastUpdated": "1579634104",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "toKebabCase",
      "title": "toKebabCase",
      "type": "snippet",
      "attributes": {
        "fileName": "toKebabCase.md",
        "text": "Converts a string to kebab case.\n\nUse `String.replaceAllMapped()` to break the string into words and `String.toLowerCase()` to convert each one to lowercase, using a `RegExp`.\nUse `String.replaceAll()` to replace invalid separator characters (`_` and spaces). with hyphens\n\n",
        "codeBlocks": {
          "code": "String toKebabCase(String str) {\n  return str\n      .replaceAllMapped(\n          new RegExp(\n              r'[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+'),\n          (Match m) => \"${m[0].toLowerCase()}\")\n      .replaceAll(new RegExp(r'(_|\\s)+'), '-');\n}",
          "example": "toKebabCase('camelCase'); // 'camel-case'\ntoKebabCase('some text'); // 'some-text'\ntoKebabCase('some-mixed_string With spaces_underscores-and-hyphens'); // 'some-mixed-string-with-spaces-underscores-and-hyphens'"
        },
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "cb97be345b36154d9a44989065525396279ef9efd0a5ac0cddfd641d0cc5c8e8",
        "firstSeen": "1579634104",
        "lastUpdated": "1579634104",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "toSnakeCase",
      "title": "toSnakeCase",
      "type": "snippet",
      "attributes": {
        "fileName": "toSnakeCase.md",
        "text": "Converts a string to snake case.\n\nUse `String.replaceAllMapped()` to break the string into words and `String.toLowerCase()` to convert each one to lowercase, using a `RegExp`.\nUse `String.replaceAll()` to replace invalid separator characters (`-` and spaces) with underscores.\n\n",
        "codeBlocks": {
          "code": "String toSnakeCase(String str) {\n  return str\n      .replaceAllMapped(\n          new RegExp(\n              r'[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+'),\n          (Match m) => \"${m[0].toLowerCase()}\")\n      .replaceAll(new RegExp(r'(-|\\s)+'), '_');\n}",
          "example": "toSnakeCase('camelCase'); // 'camel_case'\ntoSnakeCase('some text'); // 'some_text'\ntoSnakeCase('some-mixed_string With spaces_underscores-and-hyphens'); // 'some_mixed_string_with_spaces_underscores_and_hyphens'"
        },
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "5db61f65f5d435c0985f1a9f465087b55cd1e6a1d0c1e7b7c77e6e74354771bc",
        "firstSeen": "1579634104",
        "lastUpdated": "1579634104",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "toTitleCase",
      "title": "toTitleCase",
      "type": "snippet",
      "attributes": {
        "fileName": "toTitleCase.md",
        "text": "Converts a string to title case.\n\nUse `String.replaceAllMapped()` to break the string into words and capitalize the first letter of each word, using a `RegExp`.\nUse `String.replaceAll()` to replace invalid separator characters (`-` and `_`) with spaces.\n\n",
        "codeBlocks": {
          "code": "String toTitleCase(String str) {\n  return str\n      .replaceAllMapped(\n          new RegExp(\n              r'[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+'),\n          (Match m) =>\n              \"${m[0][0].toUpperCase()}${m[0].substring(1).toLowerCase()}\")\n      .replaceAll(new RegExp(r'(_|-)+'), ' ');\n}",
          "example": "toTitleCase('some_database_field_name'); // 'Some Database Field Name'\ntoTitleCase('Some label that needs to be title-cased'); // 'Some Label That Needs To Be Title Cased'\ntoTitleCase('some-package-name'); // 'Some Package Name'\ntoTitleCase('some-mixed_string with spaces_underscores-and-hyphens'); // 'Some Mixed String With Spaces Underscores And Hyphens'"
        },
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "f55dff187108db931e8e627a72f373f07bae9d28f0619e72e6ba9047f6194171",
        "firstSeen": "1579634104",
        "lastUpdated": "1579634104",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "truncateString",
      "title": "truncateString",
      "type": "snippet",
      "attributes": {
        "fileName": "truncateString.md",
        "text": "Truncates a string up to a specified length.\n\nDetermine if the string's `length` is greater than `num`. \nReturn the string truncated to the desired length, with `'...'` appended to the end or the original string.\n\n",
        "codeBlocks": {
          "code": "String truncateString(String str, int num) {\n  return str.length > num\n      ? str.substring(0, num > 3 ? num - 3 : num) + '...'\n      : str;\n}",
          "example": "truncateString('boomerang', 7); // 'boom...'"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "12f8fd6f79899f2f9a894a9903a5f355ae4f360285a9474936e446301fee574c",
        "firstSeen": "1579703363",
        "lastUpdated": "1579703363",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "words",
      "title": "words",
      "type": "snippet",
      "attributes": {
        "fileName": "words.md",
        "text": "Converts a given string into a list of words.\n\nUse `String.split()` with the supplied `pattern` to convert to a list of strings. \nUse `Iterable.where()` in combination with `String.isNotEmpty` to remove any empty strings. \nFinally, convert to a list using `Iterable.toList()`.\nOmit the optional parameter, `pattern`, to use the default regular expression (non-alphanumeric characters).\n\n",
        "codeBlocks": {
          "code": "List<String> words(String str, {String pattern = '[^a-zA-Z-]+'}) {\n  return str.split(new RegExp(pattern)).where((s) => s.isNotEmpty).toList();\n}",
          "example": "words('I love dart!!'); // ['I', 'love', 'dart']\nwords('JavaScript, TypeScript & Dart'); // ['JavaScript', 'TypeScript', 'Dart']"
        },
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "cf330144c90b90e201d24c6f34cfd91217755c64015080d747047398a6e43ceb",
        "firstSeen": "1579680695",
        "lastUpdated": "1579680695",
        "updateCount": 2,
        "authorCount": 2
      }
    }
  ],
  "meta": {
    "specification": "http://jsonapi.org/format/",
    "type": "snippetArray",
    "language": {
      "short": "dart",
      "long": "Dart"
    }
  }
}