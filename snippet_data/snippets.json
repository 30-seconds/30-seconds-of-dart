{
  "data": [
    {
      "id": "average",
      "title": "average",
      "type": "snippet",
      "attributes": {
        "fileName": "average.md",
        "text": "Returns the average value of a list of numbers.\n\nUse `Iterable.reduce()` to get the sum of all the numbers in a list, divide by `Iterable.length` to get the average.\n\n",
        "codeBlocks": {
          "code": "num average(List<num> nums){\n  return nums.reduce((num a, num b) => a + b) / nums.length;\n}",
          "example": "average([1, 2, 3, 4]); // 2.5"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "4fc857134b7d962a076ecb751464f74f3b1f725acea6d15954984ed10531e1d5",
        "firstSeen": "1579626973",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "averageBy",
      "title": "averageBy",
      "type": "snippet",
      "attributes": {
        "fileName": "averageBy.md",
        "text": "Returns the average of a list, after mapping each element to a number using the provided function.\n\nUse `Iterable.map()` to map each element to the numeric value returned by `fn`, `Iterable.reduce()` to sum the values, divide by `Iterable.length` to get the average.\n\n",
        "codeBlocks": {
          "code": "num averageBy<T>(List<T> lst, num Function(T) fn) {\n  return lst.map(fn).reduce((num a, num b) => a + b) / lst.length;\n}",
          "example": "averageBy([ {'n': 4}, {'n': 2}, {'n': 8}, {'n': 6} ], (o) => o['n']); // 5"
        },
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "1c2444f3cb95c6095c0530c66f8f430d41a48bc90d747b367204b7a68d7b9848",
        "firstSeen": "1579628185",
        "lastUpdated": "1579631549",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "capitalize",
      "title": "capitalize",
      "type": "snippet",
      "attributes": {
        "fileName": "capitalize.md",
        "text": "Capitalizes the first letter of a string.\n\nUse `String.toUpperCase()` to capitalize first letter and `String.toLowerCase()` to convert the rest of the string to lowercase, if necessary.\nOmit the optional parameter, `lowerRest`, to keep the rest of the string intact, or set it to `true` to convert to lowercase.\n\n",
        "codeBlocks": {
          "code": "String capitalize(String str, {bool lowerRest = false}) {\n  return str[0].toUpperCase() +\n      (lowerRest ? str.substring(1).toLowerCase() : str.substring(1));\n}",
          "example": "capitalize('fooBar'); // 'FooBar'\ncapitalize('fooBar', lowerRest: true); // 'Foobar'"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "ddfd4d1e5248a64ad0fb9cd624a3568c50e82c7934cdedb422cdede7d69f63d0",
        "firstSeen": "1579632223",
        "lastUpdated": "1579680689",
        "updateCount": 4,
        "authorCount": 3
      }
    },
    {
      "id": "decapitalize",
      "title": "decapitalize",
      "type": "snippet",
      "attributes": {
        "fileName": "decapitalize.md",
        "text": "Decapitalizes the first letter of a string.\n\nUse `String.toLowerCase()` to decapitalize first letter and `String.toUpperCase()` to convert the rest of the string to uppercase, if necessary.\nOmit the optional parameter, `upperRest`, to keep the rest of the string intact, or set it to `true` to convert to uppercase.\n\n",
        "codeBlocks": {
          "code": "String capitalize(String str, {bool upperRest = false}) {\n  return str[0].toUpperCase() +\n      (upperRest ? str.substring(1).toLowerCase() : str.substring(1));\n}",
          "example": "capitalize('FooBar'); // 'fooBar'\ncapitalize('FooBar', upperRest: true); // 'fOOBAR'"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "73456bc53b9feb0769f3588638f57b863ee25fe7a0579ca6b21daf9e1034e053",
        "firstSeen": "1579632349",
        "lastUpdated": "1579680689",
        "updateCount": 3,
        "authorCount": 3
      }
    },
    {
      "id": "isEven",
      "title": "isEven",
      "type": "snippet",
      "attributes": {
        "fileName": "isEven.md",
        "text": "Returns `true` if the given number is even, `false` otherwise.\n\nChecks whether a number is odd or even using the modulo (`%`) operator. \nReturns `true` if the number is even, `false` if the number is odd.\n\n",
        "codeBlocks": {
          "code": "bool isEven(num n) {\n  return n % 2 == 0;\n}",
          "example": "isEven(3); // false"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "81e2ea61320bff6729ee966a17d4918ff94f5fef16ea78f72217e280a3106f22",
        "firstSeen": "1579614060",
        "lastUpdated": "1579614060",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "isOdd",
      "title": "isOdd",
      "type": "snippet",
      "attributes": {
        "fileName": "isOdd.md",
        "text": "Returns `true` if the given number is odd, `false` otherwise.\n\nChecks whether a number is odd or even using the modulo (`%`) operator. \nReturns `true` if the number is odd, `false` if the number is even.\n\n",
        "codeBlocks": {
          "code": "bool isOdd(num n) {\n  return n % 2 != 0;\n}",
          "example": "isOdd(3); // true"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "a19d0b0952202d1e40cd20692b47454fae53b7a5ff39d2acf65e608cb0fd44aa",
        "firstSeen": "1579614060",
        "lastUpdated": "1579614060",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "isPalindrome",
      "title": "isPalindrome",
      "type": "snippet",
      "attributes": {
        "fileName": "isPalindrome.md",
        "text": "Returns `true` if the given string is a palindrome, `false` otherwise.\n\nUse `String.toLowerCase()` to convert the given string to lowercase, `String.replaceAll()` to remove non-alphanumeric characters.\nUse `String.split('')`, `Iterable.reversed` and `Iterable.join('')` to reverse it and compare it to the unreversed string.\n\n",
        "codeBlocks": {
          "code": "bool isPalindrome(String str) {\n  String s = str.toLowerCase().replaceAll(new RegExp(r'[\\W_]'), '');\n  return s == s.split('').reversed.join('');\n}",
          "example": "isPalindrome('taco cat'); // true"
        },
        "tags": [
          "string",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "357be655419520a56ad13b32f4229d790e68b97006583f97fcb48a9da435baef",
        "firstSeen": "1579679384",
        "lastUpdated": "1579679384",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "mapString",
      "title": "mapString",
      "type": "snippet",
      "attributes": {
        "fileName": "mapString.md",
        "text": "Creates a new string with the results of calling the provided function on every character in the given string.\n\nUse `String.split('')` and `Iterable.map()` to call the provided function, `fn`, for each character in `str`. \nUse `Iterable.join('')` to recombine the list of runes into a string. \n\n",
        "codeBlocks": {
          "code": "String mapString(String str, String Function(String c) fn) {\n  return str.split('').map(fn).join('');\n}",
          "example": "mapString('lorem ipsum', (c) => c.toUpperCase()); // 'LOREM IPSUM'"
        },
        "tags": [
          "string",
          "list",
          "function",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "56213a234c309b03425f4235989efce5a9a31ec128d6b41bd06356f2b0b31a9e",
        "firstSeen": "1579631640",
        "lastUpdated": "1579631640",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "max",
      "title": "max",
      "type": "snippet",
      "attributes": {
        "fileName": "max.md",
        "text": "Returns the maximum value in a list of numbers.\n\nUse `Iterable.reduce()` in combination with `max()` to find the maximum value.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum max(List<num> nums){\n  return nums.reduce(max);\n}",
          "example": "max([4, 6, 1, 2, 5]); // 6"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "d302bcce3951c7eca4f25eea43020f9c47faf756c81a1d0a6045c5f0874997ef",
        "firstSeen": "1579626973",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "maxBy",
      "title": "maxBy",
      "type": "snippet",
      "attributes": {
        "fileName": "maxBy.md",
        "text": "Returns the maximum value of a list, after mapping each element to a number using the provided function.\n\nUse `Iterable.map()` to map each element to the numeric value returned by `fn`, `max()` to find the maximum value.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum maxBy<T>(List<T> lst, num Function(T) fn) {\n  return lst.map(fn).reduce(math.max);\n}",
          "example": "maxBy([ {'n': 4}, {'n': 2}, {'n': 8}, {'n': 6} ], (o) => o['n']); // 8"
        },
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "d7d3986b23c68cce3a7012aa21d1b2220b3567153936ca450d83e07f957ecf50",
        "firstSeen": "1579628185",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "min",
      "title": "min",
      "type": "snippet",
      "attributes": {
        "fileName": "min.md",
        "text": "Returns the minimum value in a list of numbers.\n\nUse `Iterable.reduce()` in combination with `min()` to find the minimum value.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum min(List<num> nums){\n  return nums.reduce(math.min);\n}",
          "example": "min([4, 6, 1, 2, 5]); // 1"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "cfb146e64a03bfe981435f29ef79c9077a19f6153a9e0078b592b6acc7a78ce0",
        "firstSeen": "1579626973",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "minBy",
      "title": "minBy",
      "type": "snippet",
      "attributes": {
        "fileName": "minBy.md",
        "text": "Returns the minimum value of a list, after mapping each element to a number using the provided function.\n\nUse `Iterable.map()` to map each element to the numeric value returned by `fn`, `min()` to find the minimum value.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum minBy<T>(List<T> lst, num Function(T) fn) {\n  return lst.map(fn).reduce(math.min);\n}",
          "example": "minBy([ {'n': 4}, {'n': 2}, {'n': 8}, {'n': 6} ], (o) => o['n']); // 8"
        },
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "356f65b435705adfab5c5649ca659ba1af075a7cec6b9694f5f73312749d4b04",
        "firstSeen": "1579628185",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "randomDoubleInRange",
      "title": "randomDoubleInRange",
      "type": "snippet",
      "attributes": {
        "fileName": "randomDoubleInRange.md",
        "text": "Returns a random double in the specified range.\n\nUse `Random.nextDouble()` to generate a random number between `0.0` and `1.0` and map it to the desired range.\nOmit the optional parameter, `min`, to use a default minimu value of `0.0`.\nOmit the optional parameter, `max`, to use a default maximum value of `1.0`.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\ndouble randomDoubleInRange({double min = 0.0, double max = 1.0}) {\n  return new Random().nextDouble() * (max - min + 1) + min;\n}",
          "example": "randomDoubleInRange(); // 0.719213632334785\nrandomDoubleInRange(min: 2.4, max: 9.8); // 6.21315328537085"
        },
        "tags": [
          "mat",
          "utility",
          "random",
          "beginner"
        ]
      },
      "meta": {
        "hash": "658bd9a4a71cec2ec00e23332bec06d037c1d4be9724e5c328216e74e148608c",
        "firstSeen": "1579630718",
        "lastUpdated": "1579630718",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "randomIntInRange",
      "title": "randomIntInRange",
      "type": "snippet",
      "attributes": {
        "fileName": "randomIntInRange.md",
        "text": "Returns a random integer in the specified range.\n\nUse `Random.nextDouble()` to generate a random number between `0.0` and `1.0` and map it to the desired range, using `num.floor()` to make it an integer.\nOmit the optional parameter, `min`, to use a default minimu value of `0`.\nOmit the optional parameter, `max`, to use a default maximum value of `100`.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nint randomIntInRange({int min = 0, int max = 100}) {\n  return (new Random().nextDouble() * (max - min + 1) + min).floor();\n}",
          "example": "randomIntInRange(); // 90\nrandomIntInRange(min: 10, max: 30); // 23"
        },
        "tags": [
          "mat",
          "utility",
          "random",
          "beginner"
        ]
      },
      "meta": {
        "hash": "f34461c86bbcdbbc3f5d9eb2a0e36061f77c0312f1e845c5180d40390eb7f32b",
        "firstSeen": "1579630718",
        "lastUpdated": "1579630718",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "reverseString",
      "title": "reverseString",
      "type": "snippet",
      "attributes": {
        "fileName": "reverseString.md",
        "text": "Reverses a string.\n\nUse `String.split('')` and `Iterable.reversed` to reverse the order of the runes in the string.\nUse `Iterable.join('')` to combine the runes and get the reversed string.\n\n",
        "codeBlocks": {
          "code": "String reverseString(String str) {\n  return str.split('').reversed.join('');\n}",
          "example": "reverseString('foobar'); // 'raboof'"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "ce2cfa0ccc61075fb46ef9f64d99cb9b4f89c4eaf2370eb2aa76634b9e63fde5",
        "firstSeen": "1579679557",
        "lastUpdated": "1579679557",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "sum",
      "title": "sum",
      "type": "snippet",
      "attributes": {
        "fileName": "sum.md",
        "text": "Returns the sum value of a list of numbers.\n\nUse `Iterable.reduce()` to sum all the numbers in a list.\n\n",
        "codeBlocks": {
          "code": "num sum(List<num> nums){\n  return nums.reduce((num a, num b) => a + b);\n}",
          "example": "sum([1, 2, 3, 4]); // 10"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "3722d9aec3fa61f42391822a4c6007780268266c08f8f30d1076098078413765",
        "firstSeen": "1579626973",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "sumBy",
      "title": "sumBy",
      "type": "snippet",
      "attributes": {
        "fileName": "sumBy.md",
        "text": "Returns the sum of a list, after mapping each element to a number using the provided function.\n\nUse `Iterable.map()` to map each element to the numeric value returned by `fn`, `Iterable.reduce()` to sum the values.\n\n",
        "codeBlocks": {
          "code": "num sumBy<T>(List<T> lst, num Function(T) fn) {\n  return lst.map(fn).reduce((num a, num b) => a + b);\n}",
          "example": "sumBy([ {'n': 4}, {'n': 2}, {'n': 8}, {'n': 6} ], (o) => o['n']); // 20"
        },
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "fb15cf3dd1c7c91be045da40ce6894c3ecb2ad84ed5739609e8696493bbb83a5",
        "firstSeen": "1579628185",
        "lastUpdated": "1579631549",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "toCamelCase",
      "title": "toCamelCase",
      "type": "snippet",
      "attributes": {
        "fileName": "toCamelCase.md",
        "text": "Converts a string to camelcase.\n\nUse `String.replaceAllMapped()` to break the string into words and capitalize the first letter of each word, using a `RegExp`.\nUse `String.replaceAll()` to remove invalid separator characters (`_`, `-` and spaces).\nFinally, use `String.toLowerCase()` and to convert the first letter to lowercase.\n\n",
        "codeBlocks": {
          "code": "String toCamelCase(String str) {\n  String s = str\n      .replaceAllMapped(\n          new RegExp(\n              r'[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+'),\n          (Match m) =>\n              \"${m[0][0].toUpperCase()}${m[0].substring(1).toLowerCase()}\")\n      .replaceAll(new RegExp(r'(_|-|\\s)+'), '');\n  return s[0].toLowerCase() + s.substring(1);\n}",
          "example": "toCamelCase('some_database_field_name'); // 'someDatabaseFieldName'\ntoCamelCase('Some label that needs to be camelized'); // 'someLabelThatNeedsToBeCamelized'\ntoCamelCase('some-javascript-property'); // 'someJavascriptProperty'\ntoCamelCase('some-mixed_string with spaces_underscores-and-hyphens'); // 'someMixedStringWithSpacesUnderscoresAndHyphens'"
        },
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "5dfc8907f30daf76bce852b01d71625aecebc2cc53165800c0a81fec4c67643e",
        "firstSeen": "1579634104",
        "lastUpdated": "1579634104",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "toKebabCase",
      "title": "toKebabCase",
      "type": "snippet",
      "attributes": {
        "fileName": "toKebabCase.md",
        "text": "Converts a string to kebab case.\n\nUse `String.replaceAllMapped()` to break the string into words and `String.toLowerCase()` to convert each one to lowercase, using a `RegExp`.\nUse `String.replaceAll()` to replace invalid separator characters (`_` and spaces). with hyphens\n\n",
        "codeBlocks": {
          "code": "String toKebabCase(String str) {\n  return str\n      .replaceAllMapped(\n          new RegExp(\n              r'[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+'),\n          (Match m) => \"${m[0].toLowerCase()}\")\n      .replaceAll(new RegExp(r'(_|\\s)+'), '-');\n}",
          "example": "toKebabCase('camelCase'); // 'camel-case'\ntoKebabCase('some text'); // 'some-text'\ntoKebabCase('some-mixed_string With spaces_underscores-and-hyphens'); // 'some-mixed-string-with-spaces-underscores-and-hyphens'"
        },
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "cb97be345b36154d9a44989065525396279ef9efd0a5ac0cddfd641d0cc5c8e8",
        "firstSeen": "1579634104",
        "lastUpdated": "1579634104",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "toSnakeCase",
      "title": "toSnakeCase",
      "type": "snippet",
      "attributes": {
        "fileName": "toSnakeCase.md",
        "text": "Converts a string to snake case.\n\nUse `String.replaceAllMapped()` to break the string into words and `String.toLowerCase()` to convert each one to lowercase, using a `RegExp`.\nUse `String.replaceAll()` to replace invalid separator characters (`-` and spaces) with underscores.\n\n",
        "codeBlocks": {
          "code": "String toSnakeCase(String str) {\n  return str\n      .replaceAllMapped(\n          new RegExp(\n              r'[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+'),\n          (Match m) => \"${m[0].toLowerCase()}\")\n      .replaceAll(new RegExp(r'(-|\\s)+'), '_');\n}",
          "example": "toSnakeCase('camelCase'); // 'camel_case'\ntoSnakeCase('some text'); // 'some_text'\ntoSnakeCase('some-mixed_string With spaces_underscores-and-hyphens'); // 'some_mixed_string_with_spaces_underscores_and_hyphens'"
        },
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "5db61f65f5d435c0985f1a9f465087b55cd1e6a1d0c1e7b7c77e6e74354771bc",
        "firstSeen": "1579634104",
        "lastUpdated": "1579634104",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "toTitleCase",
      "title": "toTitleCase",
      "type": "snippet",
      "attributes": {
        "fileName": "toTitleCase.md",
        "text": "Converts a string to title case.\n\nUse `String.replaceAllMapped()` to break the string into words and capitalize the first letter of each word, using a `RegExp`.\nUse `String.replaceAll()` to replace invalid separator characters (`-` and `_`) with spaces.\n\n",
        "codeBlocks": {
          "code": "String toTitleCase(String str) {\n  return str\n      .replaceAllMapped(\n          new RegExp(\n              r'[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+'),\n          (Match m) =>\n              \"${m[0][0].toUpperCase()}${m[0].substring(1).toLowerCase()}\")\n      .replaceAll(new RegExp(r'(_|-)+'), ' ');\n}",
          "example": "toTitleCase('some_database_field_name'); // 'Some Database Field Name'\ntoTitleCase('Some label that needs to be title-cased'); // 'Some Label That Needs To Be Title Cased'\ntoTitleCase('some-package-name'); // 'Some Package Name'\ntoTitleCase('some-mixed_string with spaces_underscores-and-hyphens'); // 'Some Mixed String With Spaces Underscores And Hyphens'"
        },
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "f55dff187108db931e8e627a72f373f07bae9d28f0619e72e6ba9047f6194171",
        "firstSeen": "1579634104",
        "lastUpdated": "1579634104",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "words",
      "title": "words",
      "type": "snippet",
      "attributes": {
        "fileName": "words.md",
        "text": "Converts a given string into a list of words.\n\nUse `String.split()` with the supplied `pattern` to convert to a list of strings. \nUse `Iterable.where()` in combination with `String.isNotEmpty` to remove any empty strings. \nFinally, convert to a list using `Iterable.toList()`.\nOmit the optional parameter, `pattern`, to use the default regular expression (non-alphanumeric characters).\n\n",
        "codeBlocks": {
          "code": "List<String> words(String str, {String pattern = '[^a-zA-Z-]+'}) {\n  return str.split(new RegExp(pattern)).where((s) => s.isNotEmpty).toList();\n}",
          "example": "words('I love dart!!'); // ['I', 'love', 'dart']\nwords('JavaScript, TypeScript & Dart'); // ['JavaScript', 'TypeScript', 'Dart']"
        },
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "cf330144c90b90e201d24c6f34cfd91217755c64015080d747047398a6e43ceb",
        "firstSeen": "1579680695",
        "lastUpdated": "1579680695",
        "updateCount": 2,
        "authorCount": 2
      }
    }
  ],
  "meta": {
    "specification": "http://jsonapi.org/format/",
    "type": "snippetArray",
    "language": {
      "short": "dart",
      "long": "Dart"
    }
  }
}