{
  "data": [
    {
      "id": "average",
      "title": "average",
      "type": "snippet",
      "attributes": {
        "fileName": "average.md",
        "text": "Returns the average value of a list of numbers.\n\nUse `Iterable.reduce()` to get the sum of all the numbers in a list, divide by `Iterable.length` to get the average.\n\n",
        "codeBlocks": {
          "code": "num average(List<num> nums){\n  return nums.reduce((num a, num b) => a + b) / nums.length;\n}",
          "example": "average([1, 2, 3, 4]); // 2.5"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "4fc857134b7d962a076ecb751464f74f3b1f725acea6d15954984ed10531e1d5",
        "firstSeen": "1579626973",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "averageBy",
      "title": "averageBy",
      "type": "snippet",
      "attributes": {
        "fileName": "averageBy.md",
        "text": "Returns the average of a list, after mapping each element to a number using the provided function.\n\nUse `Iterable.map()` to map each element to the numeric value returned by `fn`, `Iterable.reduce()` to sum the values, divide by `Iterable.length` to get the average.\n\n",
        "codeBlocks": {
          "code": "num averageBy<T>(List<T> lst, num Function(T) fn) {\n  return lst.map(fn).reduce((num a, num b) => a + b) / lst.length;\n}",
          "example": "averageBy([ {'n': 4}, {'n': 2}, {'n': 8}, {'n': 6} ], (o) => o['n']); // 5"
        },
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "1c2444f3cb95c6095c0530c66f8f430d41a48bc90d747b367204b7a68d7b9848",
        "firstSeen": "1579628185",
        "lastUpdated": "1579631549",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "capitalize",
      "title": "capitalize",
      "type": "snippet",
      "attributes": {
        "fileName": "capitalize.md",
        "text": "Capitalizes the first letter of a string.\n\nUse `String.toUpperCase()` to capitalize first letter and `String.toLowerCase()` to convert the rest of the string to lowercase, if necessary.\nOmit the optional parameter, `lowerRest`, to keep the rest of the string intact, or set it to `true` to convert to lowercase.\n\n\nconst capitalize = ([first, ...res\n\n",
        "codeBlocks": {
          "code": "String capitalize(String str, {bool lowerRest = false}) {\n  return str[0].toUpperCase() +\n      (lowerRest ? str.substring(1).toLowerCase() : str.substring(1));\n}",
          "example": "capitalize('fooBar'); // 'FooBar'\ncapitalize('fooBar', lowerRest: true); // 'Foobar'"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "f82ab66357c89f0892f0339fa5a3b47ab2569a96a9717a0914e6072b9cb2a2c9",
        "firstSeen": "1579632223",
        "lastUpdated": "1579632349",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "decapitalize",
      "title": "decapitalize",
      "type": "snippet",
      "attributes": {
        "fileName": "decapitalize.md",
        "text": "Decapitalizes the first letter of a string.\n\nUse `String.toLowerCase()` to decapitalize first letter and `String.toUpperCase()` to convert the rest of the string to uppercase, if necessary.\nOmit the optional parameter, `upperRest`, to keep the rest of the string intact, or set it to `true` to convert to uppercase.\n\n\nconst capitalize = ([first, ...res\n\n",
        "codeBlocks": {
          "code": "String capitalize(String str, {bool upperRest = false}) {\n  return str[0].toUpperCase() +\n      (upperRest ? str.substring(1).toLowerCase() : str.substring(1));\n}",
          "example": "capitalize('FooBar'); // 'fooBar'\ncapitalize('FooBar', upperRest: true); // 'fOOBAR'"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "b992eeded58638cda05541970bbe4f4b28c9a4a5a2f5c995294cdaaa518ea50f",
        "firstSeen": "1579632349",
        "lastUpdated": "1579632349",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "isEven",
      "title": "isEven",
      "type": "snippet",
      "attributes": {
        "fileName": "isEven.md",
        "text": "Returns `true` if the given number is even, `false` otherwise.\n\nChecks whether a number is odd or even using the modulo (`%`) operator. \nReturns `true` if the number is even, `false` if the number is odd.\n\n",
        "codeBlocks": {
          "code": "bool isEven(num n) {\n  return n % 2 == 0;\n}",
          "example": "isEven(3); // false"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "81e2ea61320bff6729ee966a17d4918ff94f5fef16ea78f72217e280a3106f22",
        "firstSeen": "1579614060",
        "lastUpdated": "1579614060",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "isOdd",
      "title": "isOdd",
      "type": "snippet",
      "attributes": {
        "fileName": "isOdd.md",
        "text": "Returns `true` if the given number is odd, `false` otherwise.\n\nChecks whether a number is odd or even using the modulo (`%`) operator. \nReturns `true` if the number is odd, `false` if the number is even.\n\n",
        "codeBlocks": {
          "code": "bool isOdd(num n) {\n  return n % 2 != 0;\n}",
          "example": "isOdd(3); // true"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "a19d0b0952202d1e40cd20692b47454fae53b7a5ff39d2acf65e608cb0fd44aa",
        "firstSeen": "1579614060",
        "lastUpdated": "1579614060",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "mapString",
      "title": "mapString",
      "type": "snippet",
      "attributes": {
        "fileName": "mapString.md",
        "text": "Creates a new string with the results of calling the provided function on every character in the given string.\n\nUse `String.split('')` and `Iterable.map()` to call the provided function, `fn`, for each character in `str`. \nUse `Iterable.join('')` to recombine the list of runes into a string. \n\n",
        "codeBlocks": {
          "code": "String mapString(String str, String Function(String c) fn) {\n  return str.split('').map(fn).join('');\n}",
          "example": "mapString('lorem ipsum', (c) => c.toUpperCase()); // 'LOREM IPSUM'"
        },
        "tags": [
          "string",
          "list",
          "function",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "56213a234c309b03425f4235989efce5a9a31ec128d6b41bd06356f2b0b31a9e",
        "firstSeen": "1579631640",
        "lastUpdated": "1579631640",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "max",
      "title": "max",
      "type": "snippet",
      "attributes": {
        "fileName": "max.md",
        "text": "Returns the maximum value in a list of numbers.\n\nUse `Iterable.reduce()` in combination with `max()` to find the maximum value.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum max(List<num> nums){\n  return nums.reduce(max);\n}",
          "example": "max([4, 6, 1, 2, 5]); // 6"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "d302bcce3951c7eca4f25eea43020f9c47faf756c81a1d0a6045c5f0874997ef",
        "firstSeen": "1579626973",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "maxBy",
      "title": "maxBy",
      "type": "snippet",
      "attributes": {
        "fileName": "maxBy.md",
        "text": "Returns the maximum value of a list, after mapping each element to a number using the provided function.\n\nUse `Iterable.map()` to map each element to the numeric value returned by `fn`, `max()` to find the maximum value.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum maxBy<T>(List<T> lst, num Function(T) fn) {\n  return lst.map(fn).reduce(math.max);\n}",
          "example": "maxBy([ {'n': 4}, {'n': 2}, {'n': 8}, {'n': 6} ], (o) => o['n']); // 8"
        },
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "d7d3986b23c68cce3a7012aa21d1b2220b3567153936ca450d83e07f957ecf50",
        "firstSeen": "1579628185",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "min",
      "title": "min",
      "type": "snippet",
      "attributes": {
        "fileName": "min.md",
        "text": "Returns the minimum value in a list of numbers.\n\nUse `Iterable.reduce()` in combination with `min()` to find the minimum value.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum min(List<num> nums){\n  return nums.reduce(math.min);\n}",
          "example": "min([4, 6, 1, 2, 5]); // 1"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "cfb146e64a03bfe981435f29ef79c9077a19f6153a9e0078b592b6acc7a78ce0",
        "firstSeen": "1579626973",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "minBy",
      "title": "minBy",
      "type": "snippet",
      "attributes": {
        "fileName": "minBy.md",
        "text": "Returns the minimum value of a list, after mapping each element to a number using the provided function.\n\nUse `Iterable.map()` to map each element to the numeric value returned by `fn`, `min()` to find the minimum value.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum minBy<T>(List<T> lst, num Function(T) fn) {\n  return lst.map(fn).reduce(math.min);\n}",
          "example": "minBy([ {'n': 4}, {'n': 2}, {'n': 8}, {'n': 6} ], (o) => o['n']); // 8"
        },
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "356f65b435705adfab5c5649ca659ba1af075a7cec6b9694f5f73312749d4b04",
        "firstSeen": "1579628185",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "randomDoubleInRange",
      "title": "randomDoubleInRange",
      "type": "snippet",
      "attributes": {
        "fileName": "randomDoubleInRange.md",
        "text": "Returns a random double in the specified range.\n\nUse `Random.nextDouble()` to generate a random number between `0.0` and `1.0` and map it to the desired range.\nOmit the optional parameter, `min`, to use a default minimu value of `0.0`.\nOmit the optional parameter, `max`, to use a default maximum value of `1.0`.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\ndouble randomDoubleInRange({double min = 0.0, double max = 1.0}) {\n  return new Random().nextDouble() * (max - min + 1) + min;\n}",
          "example": "randomDoubleInRange(); // 0.719213632334785\nrandomDoubleInRange(min: 2.4, max: 9.8); // 6.21315328537085"
        },
        "tags": [
          "mat",
          "utility",
          "random",
          "beginner"
        ]
      },
      "meta": {
        "hash": "658bd9a4a71cec2ec00e23332bec06d037c1d4be9724e5c328216e74e148608c",
        "firstSeen": "1579630718",
        "lastUpdated": "1579630718",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "randomIntInRange",
      "title": "randomIntInRange",
      "type": "snippet",
      "attributes": {
        "fileName": "randomIntInRange.md",
        "text": "Returns a random integer in the specified range.\n\nUse `Random.nextDouble()` to generate a random number between `0.0` and `1.0` and map it to the desired range, using `num.floor()` to make it an integer.\nOmit the optional parameter, `min`, to use a default minimu value of `0`.\nOmit the optional parameter, `max`, to use a default maximum value of `100`.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nint randomIntInRange({int min = 0, int max = 100}) {\n  return (new Random().nextDouble() * (max - min + 1) + min).floor();\n}",
          "example": "randomIntInRange(); // 90\nrandomIntInRange(min: 10, max: 30); // 23"
        },
        "tags": [
          "mat",
          "utility",
          "random",
          "beginner"
        ]
      },
      "meta": {
        "hash": "f34461c86bbcdbbc3f5d9eb2a0e36061f77c0312f1e845c5180d40390eb7f32b",
        "firstSeen": "1579630718",
        "lastUpdated": "1579630718",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "sum",
      "title": "sum",
      "type": "snippet",
      "attributes": {
        "fileName": "sum.md",
        "text": "Returns the sum value of a list of numbers.\n\nUse `Iterable.reduce()` to sum all the numbers in a list.\n\n",
        "codeBlocks": {
          "code": "num sum(List<num> nums){\n  return nums.reduce((num a, num b) => a + b);\n}",
          "example": "sum([1, 2, 3, 4]); // 10"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "3722d9aec3fa61f42391822a4c6007780268266c08f8f30d1076098078413765",
        "firstSeen": "1579626973",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "sumBy",
      "title": "sumBy",
      "type": "snippet",
      "attributes": {
        "fileName": "sumBy.md",
        "text": "Returns the sum of a list, after mapping each element to a number using the provided function.\n\nUse `Iterable.map()` to map each element to the numeric value returned by `fn`, `Iterable.reduce()` to sum the values.\n\n",
        "codeBlocks": {
          "code": "num sumBy<T>(List<T> lst, num Function(T) fn) {\n  return lst.map(fn).reduce((num a, num b) => a + b);\n}",
          "example": "sumBy([ {'n': 4}, {'n': 2}, {'n': 8}, {'n': 6} ], (o) => o['n']); // 20"
        },
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "fb15cf3dd1c7c91be045da40ce6894c3ecb2ad84ed5739609e8696493bbb83a5",
        "firstSeen": "1579628185",
        "lastUpdated": "1579631549",
        "updateCount": 3,
        "authorCount": 2
      }
    }
  ],
  "meta": {
    "specification": "http://jsonapi.org/format/",
    "type": "snippetArray",
    "language": {
      "short": "dart",
      "long": "Dart"
    }
  }
}