{
  "data": [
    {
      "id": "all",
      "title": "all",
      "type": "snippet",
      "attributes": {
        "fileName": "all.md",
        "text": "Returns `true` if the provided predicate function returns `true` for all elements in a collection, `false` otherwise.\n\nUse `Iterable.every()` to check if all elements in the collection return `true` based on `fn`.\n\n",
        "codeBlocks": {
          "code": "bool all<T>(Iterable<T> itr, bool Function(T) fn) {\n  return itr.every(fn);\n}",
          "example": "all([4, 2, 3], (x) => x > 1); // true"
        },
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "98ea16363f597ba74b66b27d3c6bb10ecb105b3271b82af6d44fada0cd03e367",
        "firstSeen": "1581972985",
        "lastUpdated": "1581972985",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "allEqual",
      "title": "allEqual",
      "type": "snippet",
      "attributes": {
        "fileName": "allEqual.md",
        "text": "Check if all elements in a list are equal.\n\nUse `Iterable.every()` to check if all the elements of the list are the same as the first one.\n\n",
        "codeBlocks": {
          "code": "bool allEqual<T>(List<T> itr) {\n  return itr.every((i) => i == itr[0]);\n}",
          "example": "allEqual([1, 2, 3, 4, 5, 6]); // false\nallEqual([1, 1, 1, 1]); // true"
        },
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "75812cb21c2a658ae870dd9a0e73e89bbcf9002f1aa8b179ebcc8345a5f4615a",
        "firstSeen": "1581972992",
        "lastUpdated": "1581972992",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "average",
      "title": "average",
      "type": "snippet",
      "attributes": {
        "fileName": "average.md",
        "text": "Returns the average value of a list of numbers.\n\nUse `Iterable.reduce()` to get the sum of all the numbers in a list, divide by `Iterable.length` to get the average.\n\n",
        "codeBlocks": {
          "code": "num average(List<num> nums){\n  return nums.reduce((num a, num b) => a + b) / nums.length;\n}",
          "example": "average([1, 2, 3, 4]); // 2.5"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "4fc857134b7d962a076ecb751464f74f3b1f725acea6d15954984ed10531e1d5",
        "firstSeen": "1579626973",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "averageBy",
      "title": "averageBy",
      "type": "snippet",
      "attributes": {
        "fileName": "averageBy.md",
        "text": "Returns the average of a list, after mapping each element to a number using the provided function.\n\nUse `Iterable.map()` to map each element to the numeric value returned by `fn`, `Iterable.reduce()` to sum the values, divide by `Iterable.length` to get the average.\n\n",
        "codeBlocks": {
          "code": "num averageBy<T>(List<T> lst, num Function(T) fn) {\n  return lst.map(fn).reduce((num a, num b) => a + b) / lst.length;\n}",
          "example": "averageBy([ {'n': 4}, {'n': 2}, {'n': 8}, {'n': 6} ], (o) => o['n']); // 5"
        },
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "1c2444f3cb95c6095c0530c66f8f430d41a48bc90d747b367204b7a68d7b9848",
        "firstSeen": "1579628185",
        "lastUpdated": "1579631549",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "bifurcateBy",
      "title": "bifurcateBy",
      "type": "snippet",
      "attributes": {
        "fileName": "bifurcateBy.md",
        "text": "Splits values into two groups according to a predicate function, which specifies which group an element in the input collection belongs to. \nIf the predicate function returns `true`, the collection element belongs to the first group; otherwise, it belongs to the second group.\n\nUse `Iterable.retainWhere()` and `Iterable.removeWhere()` in combination with the cascade operator (`..`) and `List.from()` to create the appropriate groups using the `filter` function.\n\n",
        "codeBlocks": {
          "code": "List<List<T>> bifurcateBy<T>(List<T> lst, bool Function(T) filter) {\n  return [\n    List.from(lst..retainWhere(filter)),\n    List.from(lst..removeWhere(filter))\n  ];\n}",
          "example": "bifurcateBy(['beep', 'boop', 'foo', 'bar'], (x) => x[0] == 'b'); // [['beep', 'boop', 'bar'], ['foo']]"
        },
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "b8a040f86c7d20dfb025ec64e5a0799d5e5cf2a880fea804e59fae6d4447184c",
        "firstSeen": "1581974307",
        "lastUpdated": "1581974307",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "capitalize",
      "title": "capitalize",
      "type": "snippet",
      "attributes": {
        "fileName": "capitalize.md",
        "text": "Capitalizes the first letter of a string.\n\nUse `String.toUpperCase()` to capitalize first letter and `String.toLowerCase()` to convert the rest of the string to lowercase, if necessary.\nOmit the optional parameter, `lowerRest`, to keep the rest of the string intact, or set it to `true` to convert to lowercase.\n\n",
        "codeBlocks": {
          "code": "String capitalize(String str, {bool lowerRest = false}) {\n  return str[0].toUpperCase() +\n      (lowerRest ? str.substring(1).toLowerCase() : str.substring(1));\n}",
          "example": "capitalize('fooBar'); // 'FooBar'\ncapitalize('fooBar', lowerRest: true); // 'Foobar'"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "ddfd4d1e5248a64ad0fb9cd624a3568c50e82c7934cdedb422cdede7d69f63d0",
        "firstSeen": "1579632223",
        "lastUpdated": "1579680689",
        "updateCount": 4,
        "authorCount": 3
      }
    },
    {
      "id": "chunk",
      "title": "chunk",
      "type": "snippet",
      "attributes": {
        "fileName": "chunk.md",
        "text": "Chunks a list into smaller lists of the specified size.\n\nUse `List.generate()` to generate a list that fits the number of chunks that will be produced.\nUse `List.sublist()` to map each element of the new list to a chunk the length of `size`. \nIf the original `list` can't be split evenly, the final chunk will contain the remaining elements.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nList<List<T>> chunk<T>(List<T> lst, int size) {\n  return List.generate((lst.length / size).ceil(),\n      (i) => lst.sublist(i * size, min(i * size + size, lst.length)));\n}",
          "example": "chunk([1, 2, 3, 4, 5], 2); // [[1, 2], [3, 4], [5]]"
        },
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "965965a68856a9e21622da19b9139082e4f22e055c2f612016804c6d0667161b",
        "firstSeen": "1580842479",
        "lastUpdated": "1580842479",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "compactWhitespace",
      "title": "compactWhitespace",
      "type": "snippet",
      "attributes": {
        "fileName": "compactWhitespace.md",
        "text": "Returns a string with whitespaces compacted.\n\nUse `String.replaceAll()` with a regular expression to replace all occurrences of 2 or more whitespace characters with a single space.\n\n",
        "codeBlocks": {
          "code": "String compactWhitespace(String str) {\n  return str.replaceAll(RegExp(r'\\s{2,}'), ' ');\n}",
          "example": "compactWhitespace('Lorem    Ipsum'); // 'Lorem Ipsum'\ncompactWhitespace('Lorem \\n Ipsum'); // 'Lorem Ipsum'"
        },
        "tags": [
          "string",
          "regexp",
          "beginner"
        ]
      },
      "meta": {
        "hash": "aa464e8d34094581b2d9cdea74b9f553e8a94d447f159b0c3f79c26e216a0f8e",
        "firstSeen": "1579691307",
        "lastUpdated": "1580840666",
        "updateCount": 3,
        "authorCount": 3
      }
    },
    {
      "id": "countBy",
      "title": "countBy",
      "type": "snippet",
      "attributes": {
        "fileName": "countBy.md",
        "text": "Groups the elements of a list based on the given function and returns the count of elements in each group.\n\nUse `Iterable.map()` to map each element to the value returned by `fn`, `Iterable.toSet()` to get the unique values of the list.\nUse `Map.fromIterable()`, `Iterable.where()` and `Iterable.length` to generate a map with the unique values as keys and their frequencies as values.\n\n",
        "codeBlocks": {
          "code": "Map<Y, int> countBy<T, Y>(Iterable<T> itr, Y Function(T) fn) {\n  return Map.fromIterable(itr.map(fn).toSet(),\n      value: (i) => itr.where((v) => fn(v) == i).length);\n}",
          "example": "countBy(['one', 'two', 'three'], (v) => v.length); // [{3: 2, 5: 1}]"
        },
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "69c3ed9ad53213916e10ab6e133fb547647897bb9f15e399b10d3007e497b60c",
        "firstSeen": "1580801859",
        "lastUpdated": "1580840666",
        "updateCount": 4,
        "authorCount": 3
      }
    },
    {
      "id": "decapitalize",
      "title": "decapitalize",
      "type": "snippet",
      "attributes": {
        "fileName": "decapitalize.md",
        "text": "Decapitalizes the first letter of a string.\n\nUse `String.toLowerCase()` to decapitalize first letter and `String.toUpperCase()` to convert the rest of the string to uppercase, if necessary.\nOmit the optional parameter, `upperRest`, to keep the rest of the string intact, or set it to `true` to convert to uppercase.\n\n",
        "codeBlocks": {
          "code": "String capitalize(String str, {bool upperRest = false}) {\n  return str[0].toUpperCase() +\n      (upperRest ? str.substring(1).toLowerCase() : str.substring(1));\n}",
          "example": "capitalize('FooBar'); // 'fooBar'\ncapitalize('FooBar', upperRest: true); // 'fOOBAR'"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "73456bc53b9feb0769f3588638f57b863ee25fe7a0579ca6b21daf9e1034e053",
        "firstSeen": "1579632349",
        "lastUpdated": "1579680689",
        "updateCount": 3,
        "authorCount": 3
      }
    },
    {
      "id": "degreesToRads",
      "title": "degreesToRads",
      "type": "snippet",
      "attributes": {
        "fileName": "degreesToRads.md",
        "text": "Converts an angle from degrees to radians.\n\nUse `pi` and the degree to radian formula to convert the angle from degrees to radians.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum degreesToRads(num deg) {\n  return (deg * pi) / 180.0;\n}",
          "example": "degreesToRads(90.0); // ~1.5708"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "2aa2bec371cdd82af6f2cd7464d425d5b39e0c4179c9c1a582f68c733bd405e2",
        "firstSeen": "1579766566",
        "lastUpdated": "1579766566",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "difference",
      "title": "difference",
      "type": "snippet",
      "attributes": {
        "fileName": "difference.md",
        "text": "Returns the difference between two lists.\n\nUse `Iterable.toSet()` to get the unique values in `b`.\nUse `Iterable.where()` in combination with `Iterable.contains()` to keep only the values in `a` not contained in `b`, `Iterable.toList()` to return the appropriate result.\n\n",
        "codeBlocks": {
          "code": "List<T> difference<T>(Iterable<T> a, Iterable<T> b) {\n  final s = b.toSet();\n  return a.where((x) => !s.contains(x)).toList();\n}",
          "example": "difference([1, 2, 3], [1, 2, 4]); // [3]"
        },
        "tags": [
          "list",
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "a3c5b561c0b4bfa48b0733d6a2ababb225dd27aceba499df5180b712a25bd85c",
        "firstSeen": "1580802251",
        "lastUpdated": "1580840482",
        "updateCount": 4,
        "authorCount": 3
      }
    },
    {
      "id": "differenceBy",
      "title": "differenceBy",
      "type": "snippet",
      "attributes": {
        "fileName": "differenceBy.md",
        "text": "Returns the difference between two lists, after applying the provided function to each list element of both.\n\nUse `Iterable.toSet()` and `Iterable.map()` to get the unique values in `b` after applying `fn` to them.\nUse `Iterable.map()` to apply `fn` to all the values of `a`,  `Iterable.where()` in combination with `Iterable.contains()` to keep only the values in the resulting list not contained in the unique mapped values of `b`, `Iterable.toList()` to return the appropriate result.\n\n",
        "codeBlocks": {
          "code": "List<Y> differenceBy<T,Y>(Iterable<T> a, Iterable<T> b, Y Function(T) fn) {\n  final s = b.map(fn).toSet();\n  return a.map((x) => fn(x)).where((x) => !s.contains(x)).toList();\n}",
          "example": "differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], (v) => v['x']); // [2]"
        },
        "tags": [
          "list",
          "math",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "9dfcc0505fe97ba7a1bab2cddaef6943d6676c2439cfd05d805b59aace57f4d2",
        "firstSeen": "1580803194",
        "lastUpdated": "1580840482",
        "updateCount": 4,
        "authorCount": 3
      }
    },
    {
      "id": "digitize",
      "title": "digitize",
      "type": "snippet",
      "attributes": {
        "fileName": "digitize.md",
        "text": "Converts an integer to a list of digits.\n\nUse string interpolation to convert the integer to a string, `String.split('')` to convert it into a list.\nUse `Iterable.map()` and `int.parse()` to transform each value to an integer, `Iterable.toList()` to return a list.\n\n",
        "codeBlocks": {
          "code": "List<int> digitze(int n) {\n  return \"${n}\".split('').map((s) => int.parse(s)).toList();\n}",
          "example": "digitize(123); // [1, 2, 3]"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "f086785dd97709ad42f07477489d518ecf45791c878ebb74a71a27074a56000f",
        "firstSeen": "1579704973",
        "lastUpdated": "1579704973",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "factorial",
      "title": "factorial",
      "type": "snippet",
      "attributes": {
        "fileName": "factorial.md",
        "text": "Calculates the factorial of an integer.\n\nUse recursion. \nIf `n` is less than or equal to `1`, return `1`. \nOtherwise, return the product of `n` and the factorial of `n-1`. \nThrows an exception if `n` is a negative number.\n\n",
        "codeBlocks": {
          "code": "int factorial(int n) {\n  if (n < 0) throw ('Negative numbers are not allowed.');\n  return n <= 1 ? 1 : n * factorial(n - 1);\n}",
          "example": "factorial(6); // 720"
        },
        "tags": [
          "math",
          "recursion",
          "beginner"
        ]
      },
      "meta": {
        "hash": "5fcfb984b0bf0903f20e2033c2e76995dbc3fe75918d3e26ae35e69969bad565",
        "firstSeen": "1579704597",
        "lastUpdated": "1579704597",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "fibonacci",
      "title": "fibonacci",
      "type": "snippet",
      "attributes": {
        "fileName": "fibonacci.md",
        "text": "Generates a list, containing the Fibonacci sequence, up until the nth term.\n\nUse `List.generate()` to generate a list with `n` terms, using a function that returns the sum of the last two values, except for the first two.\n\n",
        "codeBlocks": {
          "code": "List<int> fibonacci(int n) {\n  int last = 1;\n  int last2 = 0;\n  return List<int>.generate(n, (int i) {\n    if (i < 2) return i;\n    int curr = last + last2;\n    last2 = last;\n    last = curr;\n    return curr;\n  });\n}",
          "example": "fibonacci(6); // [0, 1, 1, 2, 3, 5]"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "dd26a21299d1ed9f3e821ebcedf9708b24b7217ed993fbc3662d43210dba7bc7",
        "firstSeen": "1579705610",
        "lastUpdated": "1580840666",
        "updateCount": 3,
        "authorCount": 3
      }
    },
    {
      "id": "frequencies",
      "title": "frequencies",
      "type": "snippet",
      "attributes": {
        "fileName": "frequencies.md",
        "text": "Returns a map with the unique values of a list as keys and their frequencies as the values.\n\nUse `Iterable.toSet()` to get the unique values of the list.\nUse `Map.fromIterable()`, `Iterable.where()` and `Iterable.length` to generate a map with the unique values as keys and their frequencies as values.\n\n",
        "codeBlocks": {
          "code": "Map<T, int> frequencies<T>(Iterable<T> itr) {\n  return Map.fromIterable(itr.toSet(),\n      value: (i) => itr.where((v) => v == i).length);\n}",
          "example": "frequencies(['a', 'b', 'a', 'c', 'a', 'a', 'b']); // { a: 4, b: 2, c: 1 }"
        },
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "e83d3ebf963cfaffced8aa2cd5bcd1f4a3289e8acd732b52b87f5f18658bc02f",
        "firstSeen": "1580308074",
        "lastUpdated": "1580840666",
        "updateCount": 4,
        "authorCount": 3
      }
    },
    {
      "id": "groupBy",
      "title": "groupBy",
      "type": "snippet",
      "attributes": {
        "fileName": "groupBy.md",
        "text": "Groups the elements of a list based on the given function.\n\nUse `Iterable.map()` to map each element to the value returned by `fn`, `Iterable.toSet()` to get the unique values of the list.\nUse `Map.fromIterable()`, `Iterable.where()` and `Iterable.toList()` to generate a map with the unique values as keys and the list elements as values.\n\n",
        "codeBlocks": {
          "code": "Map<Y, List<T>> groupBy<T, Y>(Iterable<T> itr, Y Function(T) fn) {\n  return Map.fromIterable(itr.map(fn).toSet(),\n      value: (i) => itr.where((v) => fn(v) == i).toList());\n}",
          "example": "groupBy(['one', 'two', 'three'], (v) => v.length); // {3: ['one', 'two'], 5: ['three']}"
        },
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "15baadf7ded8bc4963c7f7ea1efccaede6f6274ce2d7883c44b8585880b61e94",
        "firstSeen": "1580804643",
        "lastUpdated": "1580840666",
        "updateCount": 3,
        "authorCount": 3
      }
    },
    {
      "id": "isAnagram",
      "title": "isAnagram",
      "type": "snippet",
      "attributes": {
        "fileName": "isAnagram.md",
        "text": "Checks if a string is an anagram of another string (case-insensitive, ignores spaces, punctuation and special characters).\n\nUse `String.toLowerCase()` and `String.prototype.replaceAll()` with an appropriate regular expression to remove unnecessary characters and convert the string to lowercase.\nUse `String.split('')`, `Iterable.sort()`, in combination with the cascade operator (`..`) and `Iterable.join('')` to normalize both strings and check if their normalized forms are equal.\n\n",
        "codeBlocks": {
          "code": "bool isAnagram(String str1, String str2) {\n  String normalize(String str) => (str\n          .toLowerCase()\n          .replaceAll(RegExp(r'[^a-z0-9]', caseSensitive: false), '')\n          .split('')\n            ..sort())\n      .join('');\n  return normalize(str1) == normalize(str2);\n}",
          "example": "isAnagram('iceman', 'cinema'); // true"
        },
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "3628065bf0010aacda59c2b9cab443193bbba4e097e6e6bef6f38443b00b0835",
        "firstSeen": "1579683169",
        "lastUpdated": "1580840666",
        "updateCount": 3,
        "authorCount": 3
      }
    },
    {
      "id": "isDivisible",
      "title": "isDivisible",
      "type": "snippet",
      "attributes": {
        "fileName": "isDivisible.md",
        "text": "Checks if the first integer argument is divisible by the second one.\n\nUse the modulo operator (`%`) to check if the remainder is equal to `0`.\n\n",
        "codeBlocks": {
          "code": "bool isDivisible(int dividend, int divisor) {\n  return dividend % divisor == 0;\n}",
          "example": "isDivisible(6, 3); // true"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "835100465726034631df6beff4a0bdbaa9fd185c89f68d48935bc57b6bdee1a1",
        "firstSeen": "1579766320",
        "lastUpdated": "1579766320",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "isEven",
      "title": "isEven",
      "type": "snippet",
      "attributes": {
        "fileName": "isEven.md",
        "text": "Returns `true` if the given number is even, `false` otherwise.\n\nChecks whether a number is odd or even using the modulo (`%`) operator. \nReturns `true` if the number is even, `false` if the number is odd.\n\n",
        "codeBlocks": {
          "code": "bool isEven(num n) {\n  return n % 2 == 0;\n}",
          "example": "isEven(3); // false"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "81e2ea61320bff6729ee966a17d4918ff94f5fef16ea78f72217e280a3106f22",
        "firstSeen": "1579614060",
        "lastUpdated": "1579614060",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "isLowerCase",
      "title": "isLowerCase",
      "type": "snippet",
      "attributes": {
        "fileName": "isLowerCase.md",
        "text": "Checks if a string is lower case.\n\nConvert the given string to lower case, using `String.toLowerCase()` and compare it to the original.\n\n",
        "codeBlocks": {
          "code": "bool isLowerCase(String str) {\n  return str == str.toLowerCase();\n}",
          "example": "isLowerCase('abc'); // true\nisLowerCase('a3@$'); // true\nisLowerCase('Ab4'); // false"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "e5f1b2a57cb1606e3bf8065174f6b286c8ac9b0c4125ebb7375e543682d685f5",
        "firstSeen": "1579703353",
        "lastUpdated": "1579703353",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "isOdd",
      "title": "isOdd",
      "type": "snippet",
      "attributes": {
        "fileName": "isOdd.md",
        "text": "Returns `true` if the given number is odd, `false` otherwise.\n\nChecks whether a number is odd or even using the modulo (`%`) operator. \nReturns `true` if the number is odd, `false` if the number is even.\n\n",
        "codeBlocks": {
          "code": "bool isOdd(num n) {\n  return n % 2 != 0;\n}",
          "example": "isOdd(3); // true"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "a19d0b0952202d1e40cd20692b47454fae53b7a5ff39d2acf65e608cb0fd44aa",
        "firstSeen": "1579614060",
        "lastUpdated": "1579614060",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "isPalindrome",
      "title": "isPalindrome",
      "type": "snippet",
      "attributes": {
        "fileName": "isPalindrome.md",
        "text": "Returns `true` if the given string is a palindrome, `false` otherwise.\n\nUse `String.toLowerCase()` to convert the given string to lowercase, `String.replaceAll()` to remove non-alphanumeric characters.\nUse `String.split('')`, `Iterable.reversed` and `Iterable.join('')` to reverse it and compare it to the unreversed string.\n\n",
        "codeBlocks": {
          "code": "bool isPalindrome(String str) {\n  String s = str.toLowerCase().replaceAll(RegExp(r'[\\W_]'), '');\n  return s == s.split('').reversed.join('');\n}",
          "example": "isPalindrome('taco cat'); // true"
        },
        "tags": [
          "string",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "ed2dc2b619b24f32a99ed4921f38ec813df3ce5eabd0cf8ab47ca8c44fa96486",
        "firstSeen": "1579679384",
        "lastUpdated": "1580840666",
        "updateCount": 3,
        "authorCount": 3
      }
    },
    {
      "id": "isUpperCase",
      "title": "isUpperCase",
      "type": "snippet",
      "attributes": {
        "fileName": "isUpperCase.md",
        "text": "Checks if a string is upper case.\n\nConvert the given string to upper case, using `String.toUpperCase()` and compare it to the original.\n\n",
        "codeBlocks": {
          "code": "bool isUpperCase(String str) {\n  return str == str.toUpperCase();\n}",
          "example": "isUpperCase('ABC'); // true\nisUpperCase('A3@$'); // true\nisUpperCase('aB4'); // false"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "856c4cdd2a615a427bc09e5116c560533befc5f01a1e5ee483e9318b98287f9b",
        "firstSeen": "1579703353",
        "lastUpdated": "1579703353",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "mapNumRange",
      "title": "mapNumRange",
      "type": "snippet",
      "attributes": {
        "fileName": "mapNumRange.md",
        "text": "Maps a number from one range to another range.\n\nReturns `n` mapped between `outMin`-`outMax` from `inMin`-`inMax`.\n\n",
        "codeBlocks": {
          "code": "num mapNumRange(num n, num inMin, num inMax, num outMin, num outMax) {\n  return ((n - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\n}",
          "example": "mapNumRange(5, 0, 10, 0, 100); // 50"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "6731cb2bf08f88c6c4a6b8ca853464319a7d23e979e9102d6e27bc1e5aea6c69",
        "firstSeen": "1579765965",
        "lastUpdated": "1579765965",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "mapString",
      "title": "mapString",
      "type": "snippet",
      "attributes": {
        "fileName": "mapString.md",
        "text": "Creates a string with the results of calling the provided function on every character in the given string.\n\nUse `String.split('')` and `Iterable.map()` to call the provided function, `fn`, for each character in `str`. \nUse `Iterable.join('')` to recombine the list of runes into a string. \n\n",
        "codeBlocks": {
          "code": "String mapString(String str, String Function(String c) fn) {\n  return str.split('').map(fn).join('');\n}",
          "example": "mapString('lorem ipsum', (c) => c.toUpperCase()); // 'LOREM IPSUM'"
        },
        "tags": [
          "string",
          "list",
          "function",
          "utility",
          "beginner"
        ]
      },
      "meta": {
        "hash": "da4d80156b8e73dadf912e5b2c3e10fa444b67443ede71b14f0643b5ceb380b5",
        "firstSeen": "1579631640",
        "lastUpdated": "1580840666",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "mask",
      "title": "mask",
      "type": "snippet",
      "attributes": {
        "fileName": "mask.md",
        "text": "Replaces all but the last `num` runes of a string with the specified `mask`.\n\nUse `String.substring()` to grab the last `num` runes, `String.padLeft()` to fill the beginning of the string with the `mask` up to the original length.\nOmit the optional parameter, `num`, to keep a default of `4` runes unmasked.\nOmit the optional parameter, `mask`, to use the default of `'*'`.\n\n",
        "codeBlocks": {
          "code": "String mask(String str, {int num = 4, String mask = '*'}) {\n  return str.substring(str.length - num).padLeft(str.length, mask);\n}",
          "example": "mask('1234567890'); // '******7890'\nmask('1234567890', num: 3); // '*******890'\nmask('1234567890', num: 4, mask: '\\$'); // '$$$$$$7890'"
        },
        "tags": [
          "string",
          "utility",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "418b1bda199c29d25b32146493e236c1ec9a104dac15b843c289791f3012fd20",
        "firstSeen": "1579690257",
        "lastUpdated": "1579690257",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "max",
      "title": "max",
      "type": "snippet",
      "attributes": {
        "fileName": "max.md",
        "text": "Returns the maximum value in a list of numbers.\n\nUse `Iterable.reduce()` in combination with `max()` to find the maximum value.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum max(List<num> nums){\n  return nums.reduce(max);\n}",
          "example": "max([4, 6, 1, 2, 5]); // 6"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "d302bcce3951c7eca4f25eea43020f9c47faf756c81a1d0a6045c5f0874997ef",
        "firstSeen": "1579626973",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "maxBy",
      "title": "maxBy",
      "type": "snippet",
      "attributes": {
        "fileName": "maxBy.md",
        "text": "Returns the maximum value of a list, after mapping each element to a number using the provided function.\n\nUse `Iterable.map()` to map each element to the numeric value returned by `fn`, `max()` to find the maximum value.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum maxBy<T>(List<T> lst, num Function(T) fn) {\n  return lst.map(fn).reduce(math.max);\n}",
          "example": "maxBy([ {'n': 4}, {'n': 2}, {'n': 8}, {'n': 6} ], (o) => o['n']); // 8"
        },
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "d7d3986b23c68cce3a7012aa21d1b2220b3567153936ca450d83e07f957ecf50",
        "firstSeen": "1579628185",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "min",
      "title": "min",
      "type": "snippet",
      "attributes": {
        "fileName": "min.md",
        "text": "Returns the minimum value in a list of numbers.\n\nUse `Iterable.reduce()` in combination with `min()` to find the minimum value.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum min(List<num> nums){\n  return nums.reduce(math.min);\n}",
          "example": "min([4, 6, 1, 2, 5]); // 1"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "cfb146e64a03bfe981435f29ef79c9077a19f6153a9e0078b592b6acc7a78ce0",
        "firstSeen": "1579626973",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "minBy",
      "title": "minBy",
      "type": "snippet",
      "attributes": {
        "fileName": "minBy.md",
        "text": "Returns the minimum value of a list, after mapping each element to a number using the provided function.\n\nUse `Iterable.map()` to map each element to the numeric value returned by `fn`, `min()` to find the minimum value.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum minBy<T>(List<T> lst, num Function(T) fn) {\n  return lst.map(fn).reduce(math.min);\n}",
          "example": "minBy([ {'n': 4}, {'n': 2}, {'n': 8}, {'n': 6} ], (o) => o['n']); // 8"
        },
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "356f65b435705adfab5c5649ca659ba1af075a7cec6b9694f5f73312749d4b04",
        "firstSeen": "1579628185",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "mostFrequent",
      "title": "mostFrequent",
      "type": "snippet",
      "attributes": {
        "fileName": "mostFrequent.md",
        "text": "Returns the most frequent element in a list.\n\nUse `Iterable.toSet()` to get the unique values of the list, `Set.reduce()` to iterate over them and `Iterable.where()` to find the most frequent element.\n\n",
        "codeBlocks": {
          "code": "T mostFrequent<T>(Iterable<T> itr) {\n  return itr.toSet().reduce((i, j) =>\n    itr.where((v) => v == i).length > itr.where((v) => v == j).length ? i : j);\n}",
          "example": "mostFrequent(['a', 'b', 'a', 'c', 'a', 'a', 'b']); // 'a'"
        },
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "df42d206a1165ed64b83def79698ff47ac547ccb20b8baa942e252b68d4b26c7",
        "firstSeen": "1580308946",
        "lastUpdated": "1580308946",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "none",
      "title": "none",
      "type": "snippet",
      "attributes": {
        "fileName": "none.md",
        "text": "Returns `true` if the provided predicate function returns `false` for all elements in a collection, `false` otherwise.\n\nUse `Iterable.some()` to test if any elements in the collection return `true` based on `fn`. \n\n",
        "codeBlocks": {
          "code": "bool none<T>(Iterable<T> itr, bool Function(T) fn) {\n  return !itr.any(fn);\n}",
          "example": "none([0, 1, 3, 0], (x) => x == 2); // true"
        },
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "09493c4fe4fd5f3e63b8f5926b503bd8679241da303f7b9d5d69900cbad29f4b",
        "firstSeen": "1581972985",
        "lastUpdated": "1581972985",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "pad",
      "title": "pad",
      "type": "snippet",
      "attributes": {
        "fileName": "pad.md",
        "text": "Pads a string on both sides with the specified `padding`, if it's shorter than the specified `length`.\n\nUse `String.padLeft()` and `String.padRight()` to pad both sides of the given string. \nOmit the optional parameter, `padding`, to use the whitespace as the default padding.\n\n",
        "codeBlocks": {
          "code": "String pad(String str, int length, {String padding = ' '}) {\n  return str\n      .padLeft(((str.length + length) / 2).floor(), padding)\n      .padRight(length, padding);\n}",
          "example": "pad('cat', 8); // '  cat   '\npad(String(42), 6, padding: '0'); // '004200'\npad('foobar', 3); // 'foobar'"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "35b0173d85a332c04a9b89ce067d69b2b86e969b6c9d35598e3939acb5b991cb",
        "firstSeen": "1579703357",
        "lastUpdated": "1579703357",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "radsToDegrees",
      "title": "radsToDegrees",
      "type": "snippet",
      "attributes": {
        "fileName": "radsToDegrees.md",
        "text": "Converts an angle from radians to degrees.\n\nUse `pi` and the radian to degree formula to convert the angle from radians to degrees.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum radsToDegrees(num rad) {\n  return (rad * 180.0) / pi;\n}",
          "example": "radsToDegrees(pi / 2); // 90"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "dd62b3c11efb81479e30d9d2f9e1271830be7f2a1ff485e9dccc917c6f306208",
        "firstSeen": "1579766566",
        "lastUpdated": "1579766566",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "randomDoubleInRange",
      "title": "randomDoubleInRange",
      "type": "snippet",
      "attributes": {
        "fileName": "randomDoubleInRange.md",
        "text": "Returns a random double in the specified range.\n\nUse `Random.nextDouble()` to generate a random number between `0.0` and `1.0` and map it to the desired range.\nOmit the optional parameter, `min`, to use a default minimu value of `0.0`.\nOmit the optional parameter, `max`, to use a default maximum value of `1.0`.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\ndouble randomDoubleInRange({double min = 0.0, double max = 1.0}) {\n  return Random().nextDouble() * (max - min + 1) + min;\n}",
          "example": "randomDoubleInRange(); // 0.719213632334785\nrandomDoubleInRange(min: 2.4, max: 9.8); // 6.21315328537085"
        },
        "tags": [
          "math",
          "utility",
          "random",
          "beginner"
        ]
      },
      "meta": {
        "hash": "3b77902ec76e9e9516fd91ca5a96108f9673cbe9b28d57a9ced19f037cd27d2d",
        "firstSeen": "1579630718",
        "lastUpdated": "1580840666",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "randomIntInRange",
      "title": "randomIntInRange",
      "type": "snippet",
      "attributes": {
        "fileName": "randomIntInRange.md",
        "text": "Returns a random integer in the specified range.\n\nUse `Random.nextDouble()` to generate a random number between `0.0` and `1.0` and map it to the desired range, using `num.floor()` to make it an integer.\nOmit the optional parameter, `min`, to use a default minimu value of `0`.\nOmit the optional parameter, `max`, to use a default maximum value of `100`.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nint randomIntInRange({int min = 0, int max = 100}) {\n  return (Random().nextDouble() * (max - min + 1) + min).floor();\n}",
          "example": "randomIntInRange(); // 90\nrandomIntInRange(min: 10, max: 30); // 23"
        },
        "tags": [
          "math",
          "utility",
          "random",
          "beginner"
        ]
      },
      "meta": {
        "hash": "46004bf004a6b4498b53987e57ca879932d8e81689578789b02970a6e45d91a0",
        "firstSeen": "1579630718",
        "lastUpdated": "1580840666",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "randomIntListInRange",
      "title": "randomIntListInRange",
      "type": "snippet",
      "attributes": {
        "fileName": "randomIntListInRange.md",
        "text": "Returns a a list of `n` random integers in the specified range.\n\nUse `List.generate()` to generate a list with `n` terms, using a function that returns a random integer between `min` and `max`.\nOmit the optional parameter, `min`, to use a default minimu value of `0`.\nOmit the optional parameter, `max`, to use a default maximum value of `100`.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nList<int> randomIntListInRange(n, {int min = 0, int max = 100}) {\n  return List<int>.generate(\n      n, (_) => (Random().nextDouble() * (max - min + 1) + min).floor());\n}",
          "example": "randomIntListInRange(12, 35, 10); // [ 34, 14, 27, 17, 30, 27, 20, 26, 21, 14 ]"
        },
        "tags": [
          "math",
          "utility",
          "random",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "fd93d8686d0ffc26ea720c423a1cc02a25356127a9f35c99dd6fc5921312054c",
        "firstSeen": "1579765678",
        "lastUpdated": "1580840666",
        "updateCount": 4,
        "authorCount": 3
      }
    },
    {
      "id": "removeNonASCII",
      "title": "removeNonASCII",
      "type": "snippet",
      "attributes": {
        "fileName": "removeNonASCII.md",
        "text": "Removes non-printable ASCII characters.\n\nUse `String.replaceAll()` with a regular expression to remove non-printable ASCII characters.\n\n",
        "codeBlocks": {
          "code": "String removeNonASCII(String str) {\n  return str.replaceAll(RegExp(r'[^\\x20-\\x7E]'), '');\n}",
          "example": "removeNonASCII('äÄçÇéÉêlorem-ipsumöÖÐþúÚ'); // 'lorem-ipsum'"
        },
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "adc6cc56427a870c02c3afb895eac78c733c0fe9769b075ea1d12971c6de25f0",
        "firstSeen": "1579690839",
        "lastUpdated": "1580840666",
        "updateCount": 3,
        "authorCount": 3
      }
    },
    {
      "id": "reverseString",
      "title": "reverseString",
      "type": "snippet",
      "attributes": {
        "fileName": "reverseString.md",
        "text": "Reverses a string.\n\nUse `String.split('')` and `Iterable.reversed` to reverse the order of the runes in the string.\nUse `Iterable.join('')` to combine the runes and get the reversed string.\n\n",
        "codeBlocks": {
          "code": "String reverseString(String str) {\n  return str.split('').reversed.join('');\n}",
          "example": "reverseString('foobar'); // 'raboof'"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "ce2cfa0ccc61075fb46ef9f64d99cb9b4f89c4eaf2370eb2aa76634b9e63fde5",
        "firstSeen": "1579679557",
        "lastUpdated": "1579679557",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "slice",
      "title": "slice",
      "type": "snippet",
      "attributes": {
        "fileName": "slice.md",
        "text": "Returns a new list containing the elements between `start` and `end`.\nNegative values can be used, indicating an offset from the end of the list.\n\nUse `num.isNegative` to check if either `start` or `end` are negative and normalize their values.\nUse `List.sublist()` with the normalized values to return the desired list.\nOmit the optional parameter, `end`, to use the length of the list as the default.\n\n",
        "codeBlocks": {
          "code": "List<T> slice<T>(List<T> lst, int start, [int end]) {\n  int _start = start.isNegative ? lst.length + start : start;\n  int _end = end != null ? end.isNegative ? lst.length + end : end : lst.length;\n  return lst.sublist(_start, _end);\n}",
          "example": "List<int> n = [1, 2, 3, 4, 5, 6, 7, 8];\n\nslice(n, 5);      // [6, 7, 8]\nslice(n, 1, 3);   // [2, 3]\nslice(n, 2, -2);  // [3, 4, 5, 6]\nslice(n, -4);     // [5, 6, 7, 8]\nslice(n, -6, -2); // [3, 4, 5, 6]"
        },
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "3b1ae3d2faedb8317fcbca853e17ab0482c08c5f8fef79c44ae2a6a5da19da94",
        "firstSeen": "1579768143",
        "lastUpdated": "1579768143",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "some",
      "title": "some",
      "type": "snippet",
      "attributes": {
        "fileName": "some.md",
        "text": "Returns `true` if the provided predicate function returns `true` for at least one element in a collection, `false` otherwise.\n\nUse `Iterable.any()` to test if any elements in the collection return `true` based on `fn`.\n\n",
        "codeBlocks": {
          "code": "bool some<T>(Iterable<T> itr, bool Function(T) fn) {\n  return itr.any(fn);\n}",
          "example": "some([0, 1, 2, 0], (x) => x >= 2); // true"
        },
        "tags": [
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "93e66a12cf8a5489fd28039ace53880213a6a6125ac1980c75a79dee617d5f80",
        "firstSeen": "1581972985",
        "lastUpdated": "1581972985",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "splitLines",
      "title": "splitLines",
      "type": "snippet",
      "attributes": {
        "fileName": "splitLines.md",
        "text": "Splits a multiline string into a list of lines.\n\nUse `String.split()` and a regular expression to match line breaks and create a list.\n\n",
        "codeBlocks": {
          "code": "List<String> splitLines(String str) {\n  return str.split(RegExp(r'\\r?\\n'));\n}",
          "example": "splitLines('This\\nis a\\nmultiline\\nstring.\\n'); // ['This', 'is a', 'multiline', 'string.' , '']"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "d3e127adec9e62636e2ea07fe6b9c05590b2a8bfe4069ba2b859ca8853d7e617",
        "firstSeen": "1579691995",
        "lastUpdated": "1580840666",
        "updateCount": 3,
        "authorCount": 3
      }
    },
    {
      "id": "sum",
      "title": "sum",
      "type": "snippet",
      "attributes": {
        "fileName": "sum.md",
        "text": "Returns the sum value of a list of numbers.\n\nUse `Iterable.reduce()` to sum all the numbers in a list.\n\n",
        "codeBlocks": {
          "code": "num sum(List<num> nums){\n  return nums.reduce((num a, num b) => a + b);\n}",
          "example": "sum([1, 2, 3, 4]); // 10"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "3722d9aec3fa61f42391822a4c6007780268266c08f8f30d1076098078413765",
        "firstSeen": "1579626973",
        "lastUpdated": "1579631549",
        "updateCount": 4,
        "authorCount": 2
      }
    },
    {
      "id": "sumBy",
      "title": "sumBy",
      "type": "snippet",
      "attributes": {
        "fileName": "sumBy.md",
        "text": "Returns the sum of a list, after mapping each element to a number using the provided function.\n\nUse `Iterable.map()` to map each element to the numeric value returned by `fn`, `Iterable.reduce()` to sum the values.\n\n",
        "codeBlocks": {
          "code": "num sumBy<T>(List<T> lst, num Function(T) fn) {\n  return lst.map(fn).reduce((num a, num b) => a + b);\n}",
          "example": "sumBy([ {'n': 4}, {'n': 2}, {'n': 8}, {'n': 6} ], (o) => o['n']); // 20"
        },
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "fb15cf3dd1c7c91be045da40ce6894c3ecb2ad84ed5739609e8696493bbb83a5",
        "firstSeen": "1579628185",
        "lastUpdated": "1579631549",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "symmetricDifference",
      "title": "symmetricDifference",
      "type": "snippet",
      "attributes": {
        "fileName": "symmetricDifference.md",
        "text": "Returns the symmetric difference between two lists, without filtering out duplicate values.\n\nUse `Iterable.toSet()` to get the unique values in each list.\nUse `Iterable.where()` in combination with `Iterable.contains()` to keep only the values in one list and not the other.\nFinally, use `Iterable.toList()` and `Iterable.addAll()` in combination with the cascade operator (`..`) to return the result.\n\n",
        "codeBlocks": {
          "code": "List<T> symmetricDifference<T>(List<T> a, List<T> b) {\n  final sA = a.toSet(), sB = b.toSet();\n  return a.where((x) => !sB.contains(x)).toList()\n    ..addAll(b.where((x) => !sA.contains(x)));\n}",
          "example": "symmetricDifference([1, 2, 3], [1, 2, 4]); // [3, 4]\nsymmetricDifference([1, 2, 2], [1, 3, 1]); // [2, 2, 3]"
        },
        "tags": [
          "list",
          "math",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "fc50b850e4c7d22cd18078218af4b95480af4afb0576b6cf738cd75c8d46bedc",
        "firstSeen": "1580802696",
        "lastUpdated": "1580802696",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "symmetricDifferenceBy",
      "title": "symmetricDifferenceBy",
      "type": "snippet",
      "attributes": {
        "fileName": "symmetricDifferenceBy.md",
        "text": "Returns the symmetric difference between two lists, after applying the provided function to each list element of both.\n\nUse `Iterable.toSet()` and `Iterable.map()` to get the unique values in each list after applying `fn` to them.\nUse `Iterable.where()` in combination with `Iterable.contains()` to keep only the values in one list and not the other.\nFinally, use `Iterable.toList()` and `Iterable.addAll()` in combination with the cascade operator (`..`) to return the result.\n\n",
        "codeBlocks": {
          "code": "List<Y> symmetricdifferenceBy<T,Y>(List<T> a, List<T> b, Y Function(T) fn) {\n  final sA = a.map(fn).toSet(), sB = b.map(fn).toSet();\n  return a.map((x) => fn(x)).where((x) => !sB.contains(x)).toList()\n    ..addAll(b.map((x) => fn(x)).where((x) => !sA.contains(x)));\n}",
          "example": "symmetricdifferenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }, { 'x': 3 }], (v) => v['x']); // [2, 3]"
        },
        "tags": [
          "list",
          "math",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "cc6d2dc9f680724b5a3c50f73f5d73fc30289d32203eaa62b7062748acb7389b",
        "firstSeen": "1580803781",
        "lastUpdated": "1580803781",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "toCamelCase",
      "title": "toCamelCase",
      "type": "snippet",
      "attributes": {
        "fileName": "toCamelCase.md",
        "text": "Converts a string to camelcase.\n\nUse `String.replaceAllMapped()` to break the string into words and capitalize the first letter of each word, using a `RegExp`.\nUse `String.replaceAll()` to remove invalid separator characters (`_`, `-` and spaces).\nFinally, use `String.toLowerCase()` and to convert the first letter to lowercase.\n\n",
        "codeBlocks": {
          "code": "String toCamelCase(String str) {\n  String s = str\n      .replaceAllMapped(\n          RegExp(\n            r'[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+'),\n          (Match m) =>\n            \"${m[0][0].toUpperCase()}${m[0].substring(1).toLowerCase()}\")\n      .replaceAll(RegExp(r'(_|-|\\s)+'), '');\n  return s[0].toLowerCase() + s.substring(1);\n}",
          "example": "toCamelCase('some_database_field_name'); // 'someDatabaseFieldName'\ntoCamelCase('Some label that needs to be camelized'); // 'someLabelThatNeedsToBeCamelized'\ntoCamelCase('some-javascript-property'); // 'someJavascriptProperty'\ntoCamelCase('some-mixed_string with spaces_underscores-and-hyphens'); // 'someMixedStringWithSpacesUnderscoresAndHyphens'"
        },
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "d0248206b0c3dbda2c71aa54daf0d2659539672f6f3e397a7b0e726e0ddc382e",
        "firstSeen": "1579634104",
        "lastUpdated": "1580840666",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "toKebabCase",
      "title": "toKebabCase",
      "type": "snippet",
      "attributes": {
        "fileName": "toKebabCase.md",
        "text": "Converts a string to kebab case.\n\nUse `String.replaceAllMapped()` to break the string into words and `String.toLowerCase()` to convert each one to lowercase, using a `RegExp`.\nUse `String.replaceAll()` to replace invalid separator characters (`_` and spaces). with hyphens\n\n",
        "codeBlocks": {
          "code": "String toKebabCase(String str) {\n  return str\n      .replaceAllMapped(\n          RegExp(\n            r'[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+'),\n          (Match m) => \"${m[0].toLowerCase()}\")\n      .replaceAll(RegExp(r'(_|\\s)+'), '-');\n}",
          "example": "toKebabCase('camelCase'); // 'camel-case'\ntoKebabCase('some text'); // 'some-text'\ntoKebabCase('some-mixed_string With spaces_underscores-and-hyphens'); // 'some-mixed-string-with-spaces-underscores-and-hyphens'"
        },
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "cd8a2ba937ea9a61a0738805b646534c4ad36d8d2dc9cbf426e1b7ea80043227",
        "firstSeen": "1579634104",
        "lastUpdated": "1580840666",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "toSnakeCase",
      "title": "toSnakeCase",
      "type": "snippet",
      "attributes": {
        "fileName": "toSnakeCase.md",
        "text": "Converts a string to snake case.\n\nUse `String.replaceAllMapped()` to break the string into words and `String.toLowerCase()` to convert each one to lowercase, using a `RegExp`.\nUse `String.replaceAll()` to replace invalid separator characters (`-` and spaces) with underscores.\n\n",
        "codeBlocks": {
          "code": "String toSnakeCase(String str) {\n  return str\n      .replaceAllMapped(\n          RegExp(\n            r'[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+'),\n          (Match m) => \"${m[0].toLowerCase()}\")\n      .replaceAll(RegExp(r'(-|\\s)+'), '_');\n}",
          "example": "toSnakeCase('camelCase'); // 'camel_case'\ntoSnakeCase('some text'); // 'some_text'\ntoSnakeCase('some-mixed_string With spaces_underscores-and-hyphens'); // 'some_mixed_string_with_spaces_underscores_and_hyphens'"
        },
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "b30baebfacc3921da346d42c1a29bcd694d2de66d6d5f52c33debfb71fc208e9",
        "firstSeen": "1579634104",
        "lastUpdated": "1580840666",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "toTitleCase",
      "title": "toTitleCase",
      "type": "snippet",
      "attributes": {
        "fileName": "toTitleCase.md",
        "text": "Converts a string to title case.\n\nUse `String.replaceAllMapped()` to break the string into words and capitalize the first letter of each word, using a `RegExp`.\nUse `String.replaceAll()` to replace invalid separator characters (`-` and `_`) with spaces.\n\n",
        "codeBlocks": {
          "code": "String toTitleCase(String str) {\n  return str\n      .replaceAllMapped(\n          RegExp(\n            r'[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+'),\n          (Match m) =>\n            \"${m[0][0].toUpperCase()}${m[0].substring(1).toLowerCase()}\")\n      .replaceAll(RegExp(r'(_|-)+'), ' ');\n}",
          "example": "toTitleCase('some_database_field_name'); // 'Some Database Field Name'\ntoTitleCase('Some label that needs to be title-cased'); // 'Some Label That Needs To Be Title Cased'\ntoTitleCase('some-package-name'); // 'Some Package Name'\ntoTitleCase('some-mixed_string with spaces_underscores-and-hyphens'); // 'Some Mixed String With Spaces Underscores And Hyphens'"
        },
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "185618ff621d81d014cb4c7d7d669efcd98c49c81491170cbff1b9a888fa9313",
        "firstSeen": "1579634104",
        "lastUpdated": "1580840666",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "truncateString",
      "title": "truncateString",
      "type": "snippet",
      "attributes": {
        "fileName": "truncateString.md",
        "text": "Truncates a string up to a specified length.\n\nDetermine if the string's `length` is greater than `num`. \nReturn the string truncated to the desired length, with `'...'` appended to the end or the original string.\n\n",
        "codeBlocks": {
          "code": "String truncateString(String str, int num) {\n  return str.length > num\n      ? str.substring(0, num > 3 ? num - 3 : num) + '...'\n      : str;\n}",
          "example": "truncateString('boomerang', 7); // 'boom...'"
        },
        "tags": [
          "string",
          "beginner"
        ]
      },
      "meta": {
        "hash": "12f8fd6f79899f2f9a894a9903a5f355ae4f360285a9474936e446301fee574c",
        "firstSeen": "1579703363",
        "lastUpdated": "1579703363",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "unzip",
      "title": "unzip",
      "type": "snippet",
      "attributes": {
        "fileName": "unzip.md",
        "text": "Creates a list of lists, ungrouping the elements in a list produced by [zip](/dart/s/zip).\n\nUse `List.generate()` twice to generate a list of lists, using the appropriate indexes to get their values from the original list.\n\n",
        "codeBlocks": {
          "code": "List<List<T>> unzip<T>(List<List<T>> itr) {\n  return List.generate(\n      itr[0].length, (i) => List.generate(itr.length, (k) => itr[k][i]));\n}",
          "example": "unzip([['a', 1, true], ['b', 2, false]]); // [['a', 'b'], [1, 2], [true, false]]\nunzip([['a', 1, true], ['b', 2]]); // [['a', 'b'], [1, 2], [true]]"
        },
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "96c8be2ca8c45b2211aa5bec1b587f6bd2bf58c70614d7a31d4375aa5027e62e",
        "firstSeen": "1580849305",
        "lastUpdated": "1580849305",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "words",
      "title": "words",
      "type": "snippet",
      "attributes": {
        "fileName": "words.md",
        "text": "Converts a given string into a list of words.\n\nUse `String.split()` with the supplied `pattern` to convert to a list of strings. \nUse `Iterable.where()` in combination with `String.isNotEmpty` to remove any empty strings. \nFinally, convert to a list using `Iterable.toList()`.\nOmit the optional parameter, `pattern`, to use the default regular expression (non-alphanumeric characters).\n\n",
        "codeBlocks": {
          "code": "List<String> words(String str, {String pattern = '[^a-zA-Z-]+'}) {\n  return str.split(RegExp(pattern)).where((s) => s.isNotEmpty).toList();\n}",
          "example": "words('I love dart!!'); // ['I', 'love', 'dart']\nwords('JavaScript, TypeScript & Dart'); // ['JavaScript', 'TypeScript', 'Dart']"
        },
        "tags": [
          "string",
          "regexp",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "c9105c2d0f47f2e521923fb05006049c72b18779f1eac2dbdd031aecb50e5c7b",
        "firstSeen": "1579680695",
        "lastUpdated": "1580840666",
        "updateCount": 3,
        "authorCount": 3
      }
    },
    {
      "id": "zip",
      "title": "zip",
      "type": "snippet",
      "attributes": {
        "fileName": "zip.md",
        "text": "Creates a list of elements, grouped based on the position in the original lists.\n\nUse `List.generate()` to generate a list, using `Iterable.map()`, `Iterable.reduce()` and `max()` to get the longest sublist.\nUse `List.generate()` inside the iterator to generate the sublists, using the appropriate indexes to get their values from the original list.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nList<List<T>> zip<T>(List<List<T>> itr) {\n  return List.generate(\n      itr.map((x) => x.length).reduce(max),\n      (i) => List.generate(\n          itr.length, (k) => itr[k].length > i ? itr[k][i] : null));\n}",
          "example": "zip([['a', 'b'], [1, 2], [true, false]]); // [['a', 1, true], ['b', 2, false]]\nzip([['a'], [1, 2], [true, false]]); // [['a', 1, true], [null, 2, false]]"
        },
        "tags": [
          "list",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "8681862488829c346f5a9df7b916023076bcf2385b65e0242bdae73429e95932",
        "firstSeen": "1580849305",
        "lastUpdated": "1580849305",
        "updateCount": 2,
        "authorCount": 2
      }
    }
  ],
  "meta": {
    "specification": "http://jsonapi.org/format/",
    "type": "snippetArray",
    "language": {
      "short": "dart",
      "long": "Dart"
    }
  }
}