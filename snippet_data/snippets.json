{
  "data": [
    {
      "id": "average",
      "title": "average",
      "type": "snippet",
      "attributes": {
        "fileName": "average.md",
        "text": "Returns the average value of a list of numbers.\n\nUse `iterable.reduce()` to get the sum of all the numbers in a list, divide by `iterable.length` to get the average.\n\n",
        "codeBlocks": {
          "code": "num average(List<num> nums){\n  return nums.reduce((num a, num b) => a + b) / nums.length;\n}",
          "example": "average([1, 2, 3, 4]); // 2.5"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "d2866701059e40ef5439560e73a896863b6ce2e04ae6bbbfd52e63bc88fb4afb",
        "firstSeen": "1579626973",
        "lastUpdated": "1579627955",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "averageBy",
      "title": "averageBy",
      "type": "snippet",
      "attributes": {
        "fileName": "averageBy.md",
        "text": "Returns the average of a list, after mapping each element to a number using the provided function.\n\nUse `iterable.map()` to map each element to the numeric value returned by `fn`, `iterable.reduce()` to sum the values, divide by `iterable.length` to get the average.\n\n",
        "codeBlocks": {
          "code": "num averageBy<T>(List<T> lst, num Function(T) fn) {\n  return lst.map(fn).reduce((num a, num b) => a + b) / lst.length;\n}",
          "example": "averageBy([ {'n': 4}, {'n': 2}, {'n': 8}, {'n': 6} ], (o) => o['n']); // 5"
        },
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "c10d973c2257a96fd40d7d964e1b396bbfaedd5f245ebd4649fdde8323a670df",
        "firstSeen": "1579628185",
        "lastUpdated": "1579628185",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "isEven",
      "title": "isEven",
      "type": "snippet",
      "attributes": {
        "fileName": "isEven.md",
        "text": "Returns `true` if the given number is even, `false` otherwise.\n\nChecks whether a number is odd or even using the modulo (`%`) operator. \nReturns `true` if the number is even, `false` if the number is odd.\n\n",
        "codeBlocks": {
          "code": "bool isEven(num n) {\n  return n % 2 == 0;\n}",
          "example": "isEven(3); // false"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "81e2ea61320bff6729ee966a17d4918ff94f5fef16ea78f72217e280a3106f22",
        "firstSeen": "1579614060",
        "lastUpdated": "1579614060",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "isOdd",
      "title": "isOdd",
      "type": "snippet",
      "attributes": {
        "fileName": "isOdd.md",
        "text": "Returns `true` if the given number is odd, `false` otherwise.\n\nChecks whether a number is odd or even using the modulo (`%`) operator. \nReturns `true` if the number is odd, `false` if the number is even.\n\n",
        "codeBlocks": {
          "code": "bool isOdd(num n) {\n  return n % 2 != 0;\n}",
          "example": "isOdd(3); // true"
        },
        "tags": [
          "math",
          "beginner"
        ]
      },
      "meta": {
        "hash": "a19d0b0952202d1e40cd20692b47454fae53b7a5ff39d2acf65e608cb0fd44aa",
        "firstSeen": "1579614060",
        "lastUpdated": "1579614060",
        "updateCount": 2,
        "authorCount": 2
      }
    },
    {
      "id": "max",
      "title": "max",
      "type": "snippet",
      "attributes": {
        "fileName": "max.md",
        "text": "Returns the maximum value in a list of numbers.\n\nUse `iterable.reduce()` in combination with `max()` to find the maximum value.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum max(List<num> nums){\n  return nums.reduce(max);\n}",
          "example": "max([4, 6, 1, 2, 5]); // 6"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "aaccab0c111410652b5ff069e17263dc4ed12695afb3385a2ce4f76f50c182d8",
        "firstSeen": "1579626973",
        "lastUpdated": "1579630133",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "maxBy",
      "title": "maxBy",
      "type": "snippet",
      "attributes": {
        "fileName": "maxBy.md",
        "text": "Returns the maximum value of a list, after mapping each element to a number using the provided function.\n\nUse `iterable.map()` to map each element to the numeric value returned by `fn`, `max()` to find the maximum value.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum maxBy<T>(List<T> lst, num Function(T) fn) {\n  return lst.map(fn).reduce(math.max);\n}",
          "example": "maxBy([ {'n': 4}, {'n': 2}, {'n': 8}, {'n': 6} ], (o) => o['n']); // 8"
        },
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "67487fd1d1c669a4609658fb0b79463f6202c4bdaed116246f90c6733a83a69e",
        "firstSeen": "1579628185",
        "lastUpdated": "1579630133",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "min",
      "title": "min",
      "type": "snippet",
      "attributes": {
        "fileName": "min.md",
        "text": "Returns the minimum value in a list of numbers.\n\nUse `iterable.reduce()` in combination with `min()` to find the minimum value.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum min(List<num> nums){\n  return nums.reduce(math.min);\n}",
          "example": "min([4, 6, 1, 2, 5]); // 1"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "a8d90c3c0061219ffe42a41f36d1a05b5aaf80cc27c20080732774bc88d22733",
        "firstSeen": "1579626973",
        "lastUpdated": "1579630133",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "minBy",
      "title": "minBy",
      "type": "snippet",
      "attributes": {
        "fileName": "minBy.md",
        "text": "Returns the minimum value of a list, after mapping each element to a number using the provided function.\n\nUse `iterable.map()` to map each element to the numeric value returned by `fn`, `min()` to find the minimum value.\n\n",
        "codeBlocks": {
          "code": "import 'dart:math';\n\nnum minBy<T>(List<T> lst, num Function(T) fn) {\n  return lst.map(fn).reduce(math.min);\n}",
          "example": "minBy([ {'n': 4}, {'n': 2}, {'n': 8}, {'n': 6} ], (o) => o['n']); // 8"
        },
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "a4ca334714e310032c713857838da738470736ec365c3eccdf54400fdfea42f8",
        "firstSeen": "1579628185",
        "lastUpdated": "1579630133",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "sum",
      "title": "sum",
      "type": "snippet",
      "attributes": {
        "fileName": "sum.md",
        "text": "Returns the sum value of a list of numbers.\n\nUse `iterable.reduce()` to sum all the numbers in a list.\n\n",
        "codeBlocks": {
          "code": "num sum(List<num> nums){\n  return nums.reduce((num a, num b) => a + b);\n}",
          "example": "sum([1, 2, 3, 4]); // 10"
        },
        "tags": [
          "math",
          "list",
          "beginner"
        ]
      },
      "meta": {
        "hash": "274f2625576afe02e9d8036e426a2f6d0ea9be26bfe6abe78f63dbceb5008a07",
        "firstSeen": "1579626973",
        "lastUpdated": "1579627955",
        "updateCount": 3,
        "authorCount": 2
      }
    },
    {
      "id": "sumBy",
      "title": "sumBy",
      "type": "snippet",
      "attributes": {
        "fileName": "sumBy.md",
        "text": "Returns the sum of a list, after mapping each element to a number using the provided function.\n\nUse `iterable.map()` to map each element to the numeric value returned by `fn`, `iterable.reduce()` to sum the values.\n\n",
        "codeBlocks": {
          "code": "num sumBy<T>(List<T> lst, num Function(T) fn) {\n  return lst.map(fn).reduce((num a, num b) => a + b);\n}",
          "example": "sumBy([ {'n': 4}, {'n': 2}, {'n': 8}, {'n': 6} ], (o) => o['n']); // 20"
        },
        "tags": [
          "math",
          "list",
          "function",
          "intermediate"
        ]
      },
      "meta": {
        "hash": "fbf7c20571477d7d4a33c6c73fe78862e26da45f2fddd2079e2af75b8b18678a",
        "firstSeen": "1579628185",
        "lastUpdated": "1579628185",
        "updateCount": 2,
        "authorCount": 2
      }
    }
  ],
  "meta": {
    "specification": "http://jsonapi.org/format/",
    "type": "snippetArray",
    "language": {
      "short": "dart",
      "long": "Dart"
    }
  }
}